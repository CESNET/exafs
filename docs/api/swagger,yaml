openapi: 3.0.3
info:
  title: ExaFS API v3
  description: ExaFS API allows authorized machines to send commands directly in JSON, without the web forms.
  version: 3.0.0
servers:
  - url: http://localhost/api/v3/

paths:
  /auth:
    get:
      summary: Get JWT token
      description: Obtain a JWT token using the machine's API key.
      responses:
        '200':
          description: Successful token retrieval
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token used for authorization.

  /rules:
    get:
      summary: List all rules
      description: Retrieve all active rules.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of rules
          content:
            application/json:
              schema:
                type: object
                properties:
                  flowspec_ipv4_rw:
                    type: array
                    items:
                      $ref: '#/components/schemas/Rule'
                  flowspec_ipv6_rw:
                    type: array
                    items:
                      $ref: '#/components/schemas/Rule'
                  rtbh_any_rw:
                    type: array
                    items:
                      $ref: '#/components/schemas/RTBHRule'
                  flowspec_ipv4_ro:
                    type: array
                    items:
                      $ref: '#/components/schemas/Rule'
                  flowspec_ipv6_ro:
                    type: array
                    items:
                      $ref: '#/components/schemas/Rule'
                  rtbh_any_ro:
                    type: array
                    items:
                      $ref: '#/components/schemas/RTBHRule'

  /rules/ipv4:
    post:
      summary: Create new IPv4 rule
      description: Add a new IPv4 rule. A valid IPv4 address and mask must be provided for the source or destination.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPv4RuleRequest'
      responses:
        '201':
          description: Rule successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPv4RuleResponse'

  /rules/ipv4/{rule_id}:
    get:
      summary: Get IPv4 rule details
      description: Retrieve details of a single IPv4 rule.
      parameters:
        - name: rule_id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Rule details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'

    delete:
      summary: Delete IPv4 rule
      description: Delete a specific IPv4 rule. Must be the owner or admin.
      parameters:
        - name: rule_id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Rule deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /rules/ipv6:
    post:
      summary: Create new IPv6 rule
      description: Add a new IPv6 rule. A valid IPv6 address and mask must be provided for the source or destination.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPv6RuleRequest'
      responses:
        '201':
          description: Rule successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPv6RuleResponse'

  /rules/ipv6/{rule_id}:
    get:
      summary: Get IPv6 rule details
      description: Retrieve details of a single IPv6 rule.
      parameters:
        - name: rule_id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Rule details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'

    delete:
      summary: Delete IPv6 rule
      description: Delete a specific IPv6 rule. Must be the owner or admin.
      parameters:
        - name: rule_id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Rule deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /rules/rtbh:
    post:
      summary: Create new RTBH rule
      description: Add a new RTBH rule. A valid IPv4 or IPv6 address and mask must be provided as the source.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RTBHRuleRequest'
      responses:
        '201':
          description: Rule successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RTBHRuleResponse'

  /rules/rtbh/{rule_id}:
    get:
      summary: Get RTBH rule details
      description: Retrieve details of a single RTBH rule.
      parameters:
        - name: rule_id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Rule details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RTBHRule'

    delete:
      summary: Delete RTBH rule
      description: Delete a specific RTBH rule. Must be the owner or admin.
      parameters:
        - name: rule_id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Rule deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /actions:
    get:
      summary: Get all actions
      description: Retrieve a list of all available actions for the user/machine owner.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of actions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    type: string

  /communities:
    get:
      summary: Get all communities
      description: Retrieve a list of all RTBH communities for the user/machine owner.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of communities
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    Rule:
      type: object
      properties:
        action:
          type: string
        comment:
          type: string
        created:
          type: string
          format: date-time
        dest:
          type: string
        dest_mask:
          type: integer
          nullable: true
        dest_port:
          type: string
        expires:
          type: string
          format: date-time
        flags:
          type: string
        id:
          type: integer
        packet_len:
          type: string
        protocol:
          type: string
        rstate:
          type: string
        source:
          type: string
        source_mask:
          type: integer
        source_port:
          type: string
        user:
          type: string

    IPv4RuleRequest:
      type: object
      properties:
        action:
          type: integer
        protocol:
          type: string
        source:
          type: string
        source_mask:
          type: integer
        source_port:
          type: string
        expires:
          type: string
          format: date-time

    IPv4RuleResponse:
      type: object
      properties:
        message:
          type: string
        rule:
          $ref: '#/components/schemas/Rule'

    IPv6RuleRequest:
      type: object
      properties:
        action:
          type: integer
        next_header:
          type: string
        source:
          type: string
        source_mask:
          type: integer
        source_port:
          type: string
        expires:
          type: string
          format: date-time

    IPv6RuleResponse:
      type: object
      properties:
        message:
          type: string
        rule:
          $ref: '#/components/schemas/Rule'

    RTBHRuleRequest:
      type: object
      properties:
        community:
          type: integer
        ipv4:
          type: string
        ipv4_mask:
          type: integer
        expires:
          type: string
          format: date-time

    RTBHRuleResponse:
      type: object
      properties:
        message:
          type: string
        rule:
          $ref: '#/components/schemas/RTBHRule'

    RTBHRule:
      type: object
      properties:
        created:
          type: string
          format: date-time
        expires:
          type: string
          format: date-time
        ipv4:
          type: string
        ipv4_mask:
          type: integer
        ipv6:
          type: string
        ipv6_mask:
          type: integer
        rstate:
          type: string
