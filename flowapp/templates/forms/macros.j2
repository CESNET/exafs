{# Renders field for bootstrap 5 standards.

    Params:
        field - WTForm field
        kwargs - pass any arguments you want in order to put them into the html attributes.
        There are few exceptions: for - for_, class - class_, class__ - class_

    Example usage:
        {{ macros.render_field(form.email, placeholder='Input email', type='email') }}
#}
{% macro render_field(field, label_visible=true, tooltip=False) -%}
    <div class="form-group {% if field.errors %}has-error{% endif %} {{ kwargs.pop('class_', '') }}">
        {% if (field.type != 'HiddenField' and field.type !='CSRFTokenField') and label_visible %}
            <label for="{{ field.id }}" class="control-label">{{ field.label }}</label>
        {% endif %}
        {% if field.type == 'SelectField' %}
            {% set input_class = 'form-select' %}
        {% else %}
            {% set input_class = 'form-control' %}
        {% endif %}
        {% if field.errors %}
            {% set input_class = input_class + ' is-invalid' %}
        {% endif %}

        {% if tooltip %}
            <div class="input-group">
                {{ field(class_=input_class, **kwargs) }}
                <span class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="top"
                      title="{{ tooltip }}">
                    <i class="bi bi-question-square-fill"></i>
              </span>
            </div>
        {% else %}
            {{ field(class_=input_class, **kwargs) }}
        {% endif %}
        {% if field.errors %}
            {% for e in field.errors %}
                <p class="help-block text-danger form-text">{{ e }}</p>
            {% endfor %}
        {% endif %}
    </div>
{%- endmacro %}






{# Renders checkbox fields since they are represented differently in bootstrap
    Params:
        field - WTForm field (there are no check, but you should put here only BooleanField.
        kwargs - pass any arguments you want in order to put them into the html attributes.
        There are few exceptions: for - for_, class - class_, class__ - class_

    Example usage:
        {{ macros.render_checkbox_field(form.remember_me) }}
 #}
{% macro render_checkbox_field(field) -%}
    <div class="checkbox">
        <label>
            {{ field(type='checkbox', **kwargs) }} {{ field.label }}
        </label>
    </div>
{%- endmacro %}

{# Renders radio field
    Params:
        field - WTForm field (there are no check, but you should put here only BooleanField.
        kwargs - pass any arguments you want in order to put them into the html attributes.
        There are few exceptions: for - for_, class - class_, class__ - class_

    Example usage:
        {{ macros.render_radio_field(form.answers) }}
 #}
{% macro render_radio_field(field) -%}
    {% for value, label, _ in field.iter_choices() %}
        <div class="radio">
            <label>
                <input type="radio" name="{{ field.id }}" id="{{ field.id }}"
                       value="{{ value }}">{{ label }}
            </label>
        </div>
    {% endfor %}
{%- endmacro %}

{# Renders WTForm in bootstrap way. There are two ways to call function:
     - as macros: it will render all field forms using cycle to iterate over them
     - as call: it will insert form fields as you specify:
     e.g. {% call macros.render_form(form, action_url=url_for('login_view'), action_text='Login',
                                        class_='login-form') %}
                {{ macros.render_field(form.email, placeholder='Input email', type='email') }}
                {{ macros.render_field(form.password, placeholder='Input password', type='password') }}
                {{ macros.render_checkbox_field(form.remember_me, type='checkbox') }}
            {% endcall %}

     Params:
        form - WTForm class
        action_url - url where to submit this form
        action_text - text of submit button
        class_ - sets a class for form
    #}
{% macro render_form(form, action_url='', action_text='Submit', class_='', btn_class='btn btn-primary') -%}

    <form method="POST" action="{{ action_url }}" role="form" class="{{ class_ }}">
        {{ form.hidden_tag() if form.hidden_tag }}
        {% if caller %}
            {{ caller() }}
        {% else %}
            {% for f in form %}
                {% if f.type == 'BooleanField' %}
                    {{ render_checkbox_field(f) }}
                {% elif f.type == 'RadioField' %}
                    {{ render_radio_field(f) }}
                {% else %}
                    {{ render_field(f) }}
                {% endif %}
            {% endfor %}
        {% endif %}
        <button type="submit" class="{{ btn_class }}">{{ action_text }} </button>
    </form>
{%- endmacro %}

{% macro render_ip_and_mask_field_group(fieldIP, fieldMask, label_visible=true, tooltip=False, showFillRange=True, ipKwargs={}, maskKwargs={}) -%}
    <div class="form-group {% if fieldIP.errors or fieldMask.errors %}has-error{% endif %} {{ kwargs.pop('class_', '') }}  mb-3">
        {% if (fieldIP.type != 'HiddenField' and fieldIP.type !='CSRFTokenField') and label_visible %}
            <label for="{{ fieldIP.id }}" class="control-label">{{ fieldIP.label }}
                / {{ fieldMask.label }}

            </label>
            {% if showFillRange %}
            <a role="button" class="float-end" href="#"
               onclick="ExaFS.fillOrganization('{{ fieldIP.id }}', '{{ fieldMask.id }}')">Fill
                range</a>
            {% endif %}
        {% endif %}
        {% set ip_class = 'form-control' %}
        {% set mask_class = 'form-control ip-mask' %}
        {% if fieldIP.errors %}
            {% set ip_class = ip_class + ' is-invalid' %}
        {% endif %}
        {% if fieldMask.errors %}
            {% set mask_class = mask_class + ' is-invalid' %}
        {% endif %}
        <div class="input-group">
            {{ fieldIP(class_=ip_class, onkeypress="ExaFS.switchFocusOnKeypress(event, '/', '" + fieldMask.id + "')", **ipKwargs) }}
            <span class="input-group-text">/</span>
            {{ fieldMask(class_=mask_class, **maskKwargs) }}

        </div>
        {% if fieldIP.errors %}
            {% for e in fieldIP.errors %}
                <p class="help-block text-danger form-text">{{ e }}</p>
            {% endfor %}
        {% endif %}
        {% if fieldMask.errors %}
            {% for e in fieldMask.errors %}
                <p class="help-block text-danger form-text">{{ e }}</p>
            {% endfor %}
        {% endif %}
    </div>

{%- endmacro %}

{% macro fill_org_form(net_list) %}
    <div class="modal fade" data-bs-backdrop="static" tabindex="-1" id="orgSelectModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Select organization range</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <label for="orgSelect">Select a range from available organizations</label>
                    <select id="orgSelect" class="form-select">
                        <option selected disabled>--- Select a range ---</option>
                        {% for net in net_list %}
                            <option value="{{ net }}">{{ net }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close
                    </button>
                    <button type="button" class="btn btn-primary" id="fill-org-btn">Use range
                    </button>
                </div>
            </div>
        </div>
    </div>
{% endmacro %}

{% macro render_ddp_preset_selection(presets, initData) %}
    <div class="row mt-2 mb-4">
        <div class="col-12">
            <hr class="mt-2 mb-4">
        </div>

        <div class="col-sm-12 col-md-6">
            <label for="preset-select">DDoS Protector mitigation config</label>
            <select name="preset" id="preset-select" class="form-select"
                    onChange="renderPreset(this.value)">
                <option selected disabled>--- Select a mitigation strategy ---</option>
                <option value="-1">Redirect only (don't add rules to DDoS Protector)</option>
                {% for preset in presets %}
                    <option value="{{ preset.id }}" {% if initData['preset'] is not none and initData['preset'] == preset.id %}
                    selected {% endif %}>
                        {{ preset.name }}</option>
                {% endfor %}
            </select>
            <span class="form-text text-danger" id="preset-select-error"></span>
        </div>
    </div>
    <div class="row my-2 d-none" id="advanced-opts-toggle-wrapper">
        <a data-bs-toggle="collapse" href="#rule-data-wrapper" role="button" aria-expanded="false"
           id="advanced-opts-toggle" onClick="toggleAdvancedOpts()"
           aria-controls="rule-data-wrapper">Show advanced options <i class="bi bi-caret-down-fill"></i></a>
    </div>
    <div class="row">
        <div class="ddp-preset-detail-container collapse" id="rule-data-wrapper">

        </div>

    </div>
    <script type="text/javascript">
        const presets = {{ presets|tojson|safe }};
        let advancedOptsOpen = false;

        function toggleAdvancedOpts() {
            advancedOptsOpen = !advancedOptsOpen;
            ExaFS.changeAdvancedOptionsText('advanced-opts-toggle', advancedOptsOpen);
        }

        function renderPreset(id, initData={}) {
            if (id === '-1') {
                ExaFS.initSelectPresetForm({name: 'Redirect only', id: -1, editable: [], fields: {rule_type: 'No rule'}}, 'rule-data-wrapper', 'advanced-opts-toggle-wrapper');
            }
            const idx = presets.findIndex((preset) => {return preset.id === +id})
            if (idx !== -1) {
                ExaFS.initSelectPresetForm(presets[idx], 'rule-data-wrapper', 'advanced-opts-toggle-wrapper', initData);
            }
        }

        {% if initData['action'] == 4 %}
            ExaFS.hideFieldIfNot('4', '4', 'ddp-form-wrapper');
        {% endif %}
        {% if initData['preset'] is not none %}
            renderPreset({{ initData['preset'] }}, {{ initData|tojson|safe }});
        {% endif %}
    </script>
{% endmacro %}
