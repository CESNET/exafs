/*! For license information please see exafs-bundle.js.LICENSE.txt */
var ExaFS;(()=>{"use strict";var e={169:(e,t,i)=>{i.r(t),i.d(t,{Alert:()=>vt,Button:()=>yt,Carousel:()=>Dt,Collapse:()=>zt,Dropdown:()=>hi,Modal:()=>Bi,Offcanvas:()=>zi,Popover:()=>vn,ScrollSpy:()=>In,Tab:()=>Nn,Toast:()=>jn,Tooltip:()=>pn});var n={};i.r(n),i.d(n,{afterMain:()=>T,afterRead:()=>y,afterWrite:()=>O,applyStyles:()=>k,arrow:()=>Q,auto:()=>l,basePlacements:()=>c,beforeMain:()=>E,beforeRead:()=>v,beforeWrite:()=>A,bottom:()=>o,clippingParents:()=>h,computeStyles:()=>te,createPopper:()=>xe,createPopperBase:()=>Le,createPopperLite:()=>Ne,detectOverflow:()=>ge,end:()=>u,eventListeners:()=>ne,flip:()=>_e,hide:()=>ye,left:()=>a,main:()=>w,modifierPhases:()=>C,offset:()=>Ee,placements:()=>_,popper:()=>p,popperGenerator:()=>Pe,popperOffsets:()=>we,preventOverflow:()=>Te,read:()=>b,reference:()=>m,right:()=>r,start:()=>d,top:()=>s,variationPlacements:()=>g,viewport:()=>f,write:()=>I});var s="top",o="bottom",r="right",a="left",l="auto",c=[s,o,r,a],d="start",u="end",h="clippingParents",f="viewport",p="popper",m="reference",g=c.reduce((function(e,t){return e.concat([t+"-"+d,t+"-"+u])}),[]),_=[].concat(c,[l]).reduce((function(e,t){return e.concat([t,t+"-"+d,t+"-"+u])}),[]),v="beforeRead",b="read",y="afterRead",E="beforeMain",w="main",T="afterMain",A="beforeWrite",I="write",O="afterWrite",C=[v,b,y,E,w,T,A,I,O];function P(e){return e?(e.nodeName||"").toLowerCase():null}function L(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function x(e){return e instanceof L(e).Element||e instanceof Element}function N(e){return e instanceof L(e).HTMLElement||e instanceof HTMLElement}function S(e){return"undefined"!=typeof ShadowRoot&&(e instanceof L(e).ShadowRoot||e instanceof ShadowRoot)}const k={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var i=t.styles[e]||{},n=t.attributes[e]||{},s=t.elements[e];N(s)&&P(s)&&(Object.assign(s.style,i),Object.keys(n).forEach((function(e){var t=n[e];!1===t?s.removeAttribute(e):s.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,i={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,i.popper),t.styles=i,t.elements.arrow&&Object.assign(t.elements.arrow.style,i.arrow),function(){Object.keys(t.elements).forEach((function(e){var n=t.elements[e],s=t.attributes[e]||{},o=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:i[e]).reduce((function(e,t){return e[t]="",e}),{});N(n)&&P(n)&&(Object.assign(n.style,o),Object.keys(s).forEach((function(e){n.removeAttribute(e)})))}))}},requires:["computeStyles"]};function F(e){return e.split("-")[0]}var R=Math.max,D=Math.min,M=Math.round;function j(e,t){void 0===t&&(t=!1);var i=e.getBoundingClientRect(),n=1,s=1;if(N(e)&&t){var o=e.offsetHeight,r=e.offsetWidth;r>0&&(n=M(i.width)/r||1),o>0&&(s=M(i.height)/o||1)}return{width:i.width/n,height:i.height/s,top:i.top/s,right:i.right/n,bottom:i.bottom/s,left:i.left/n,x:i.left/n,y:i.top/s}}function B(e){var t=j(e),i=e.offsetWidth,n=e.offsetHeight;return Math.abs(t.width-i)<=1&&(i=t.width),Math.abs(t.height-n)<=1&&(n=t.height),{x:e.offsetLeft,y:e.offsetTop,width:i,height:n}}function $(e,t){var i=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(i&&S(i)){var n=t;do{if(n&&e.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function H(e){return L(e).getComputedStyle(e)}function V(e){return["table","td","th"].indexOf(P(e))>=0}function q(e){return((x(e)?e.ownerDocument:e.document)||window.document).documentElement}function U(e){return"html"===P(e)?e:e.assignedSlot||e.parentNode||(S(e)?e.host:null)||q(e)}function W(e){return N(e)&&"fixed"!==H(e).position?e.offsetParent:null}function z(e){for(var t=L(e),i=W(e);i&&V(i)&&"static"===H(i).position;)i=W(i);return i&&("html"===P(i)||"body"===P(i)&&"static"===H(i).position)?t:i||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&N(e)&&"fixed"===H(e).position)return null;var i=U(e);for(S(i)&&(i=i.host);N(i)&&["html","body"].indexOf(P(i))<0;){var n=H(i);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||t&&"filter"===n.willChange||t&&n.filter&&"none"!==n.filter)return i;i=i.parentNode}return null}(e)||t}function Y(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function G(e,t,i){return R(e,D(t,i))}function K(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function X(e,t){return t.reduce((function(t,i){return t[i]=e,t}),{})}const Q={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,i=e.state,n=e.name,l=e.options,d=i.elements.arrow,u=i.modifiersData.popperOffsets,h=F(i.placement),f=Y(h),p=[a,r].indexOf(h)>=0?"height":"width";if(d&&u){var m=function(e,t){return K("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:X(e,c))}(l.padding,i),g=B(d),_="y"===f?s:a,v="y"===f?o:r,b=i.rects.reference[p]+i.rects.reference[f]-u[f]-i.rects.popper[p],y=u[f]-i.rects.reference[f],E=z(d),w=E?"y"===f?E.clientHeight||0:E.clientWidth||0:0,T=b/2-y/2,A=m[_],I=w-g[p]-m[v],O=w/2-g[p]/2+T,C=G(A,O,I),P=f;i.modifiersData[n]=((t={})[P]=C,t.centerOffset=C-O,t)}},effect:function(e){var t=e.state,i=e.options.element,n=void 0===i?"[data-popper-arrow]":i;null!=n&&("string"!=typeof n||(n=t.elements.popper.querySelector(n)))&&$(t.elements.popper,n)&&(t.elements.arrow=n)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Z(e){return e.split("-")[1]}var J={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ee(e){var t,i=e.popper,n=e.popperRect,l=e.placement,c=e.variation,d=e.offsets,h=e.position,f=e.gpuAcceleration,p=e.adaptive,m=e.roundOffsets,g=e.isFixed,_=d.x,v=void 0===_?0:_,b=d.y,y=void 0===b?0:b,E="function"==typeof m?m({x:v,y}):{x:v,y};v=E.x,y=E.y;var w=d.hasOwnProperty("x"),T=d.hasOwnProperty("y"),A=a,I=s,O=window;if(p){var C=z(i),P="clientHeight",x="clientWidth";C===L(i)&&"static"!==H(C=q(i)).position&&"absolute"===h&&(P="scrollHeight",x="scrollWidth"),(l===s||(l===a||l===r)&&c===u)&&(I=o,y-=(g&&C===O&&O.visualViewport?O.visualViewport.height:C[P])-n.height,y*=f?1:-1),l!==a&&(l!==s&&l!==o||c!==u)||(A=r,v-=(g&&C===O&&O.visualViewport?O.visualViewport.width:C[x])-n.width,v*=f?1:-1)}var N,S=Object.assign({position:h},p&&J),k=!0===m?function(e){var t=e.x,i=e.y,n=window.devicePixelRatio||1;return{x:M(t*n)/n||0,y:M(i*n)/n||0}}({x:v,y}):{x:v,y};return v=k.x,y=k.y,f?Object.assign({},S,((N={})[I]=T?"0":"",N[A]=w?"0":"",N.transform=(O.devicePixelRatio||1)<=1?"translate("+v+"px, "+y+"px)":"translate3d("+v+"px, "+y+"px, 0)",N)):Object.assign({},S,((t={})[I]=T?y+"px":"",t[A]=w?v+"px":"",t.transform="",t))}const te={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,i=e.options,n=i.gpuAcceleration,s=void 0===n||n,o=i.adaptive,r=void 0===o||o,a=i.roundOffsets,l=void 0===a||a,c={placement:F(t.placement),variation:Z(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:s,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,ee(Object.assign({},c,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:r,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,ee(Object.assign({},c,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var ie={passive:!0};const ne={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,i=e.instance,n=e.options,s=n.scroll,o=void 0===s||s,r=n.resize,a=void 0===r||r,l=L(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&c.forEach((function(e){e.addEventListener("scroll",i.update,ie)})),a&&l.addEventListener("resize",i.update,ie),function(){o&&c.forEach((function(e){e.removeEventListener("scroll",i.update,ie)})),a&&l.removeEventListener("resize",i.update,ie)}},data:{}};var se={left:"right",right:"left",bottom:"top",top:"bottom"};function oe(e){return e.replace(/left|right|bottom|top/g,(function(e){return se[e]}))}var re={start:"end",end:"start"};function ae(e){return e.replace(/start|end/g,(function(e){return re[e]}))}function le(e){var t=L(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function ce(e){return j(q(e)).left+le(e).scrollLeft}function de(e){var t=H(e),i=t.overflow,n=t.overflowX,s=t.overflowY;return/auto|scroll|overlay|hidden/.test(i+s+n)}function ue(e){return["html","body","#document"].indexOf(P(e))>=0?e.ownerDocument.body:N(e)&&de(e)?e:ue(U(e))}function he(e,t){var i;void 0===t&&(t=[]);var n=ue(e),s=n===(null==(i=e.ownerDocument)?void 0:i.body),o=L(n),r=s?[o].concat(o.visualViewport||[],de(n)?n:[]):n,a=t.concat(r);return s?a:a.concat(he(U(r)))}function fe(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function pe(e,t){return t===f?fe(function(e){var t=L(e),i=q(e),n=t.visualViewport,s=i.clientWidth,o=i.clientHeight,r=0,a=0;return n&&(s=n.width,o=n.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(r=n.offsetLeft,a=n.offsetTop)),{width:s,height:o,x:r+ce(e),y:a}}(e)):x(t)?function(e){var t=j(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):fe(function(e){var t,i=q(e),n=le(e),s=null==(t=e.ownerDocument)?void 0:t.body,o=R(i.scrollWidth,i.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),r=R(i.scrollHeight,i.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-n.scrollLeft+ce(e),l=-n.scrollTop;return"rtl"===H(s||i).direction&&(a+=R(i.clientWidth,s?s.clientWidth:0)-o),{width:o,height:r,x:a,y:l}}(q(e)))}function me(e){var t,i=e.reference,n=e.element,l=e.placement,c=l?F(l):null,h=l?Z(l):null,f=i.x+i.width/2-n.width/2,p=i.y+i.height/2-n.height/2;switch(c){case s:t={x:f,y:i.y-n.height};break;case o:t={x:f,y:i.y+i.height};break;case r:t={x:i.x+i.width,y:p};break;case a:t={x:i.x-n.width,y:p};break;default:t={x:i.x,y:i.y}}var m=c?Y(c):null;if(null!=m){var g="y"===m?"height":"width";switch(h){case d:t[m]=t[m]-(i[g]/2-n[g]/2);break;case u:t[m]=t[m]+(i[g]/2-n[g]/2)}}return t}function ge(e,t){void 0===t&&(t={});var i=t,n=i.placement,a=void 0===n?e.placement:n,l=i.boundary,d=void 0===l?h:l,u=i.rootBoundary,g=void 0===u?f:u,_=i.elementContext,v=void 0===_?p:_,b=i.altBoundary,y=void 0!==b&&b,E=i.padding,w=void 0===E?0:E,T=K("number"!=typeof w?w:X(w,c)),A=v===p?m:p,I=e.rects.popper,O=e.elements[y?A:v],C=function(e,t,i){var n="clippingParents"===t?function(e){var t=he(U(e)),i=["absolute","fixed"].indexOf(H(e).position)>=0&&N(e)?z(e):e;return x(i)?t.filter((function(e){return x(e)&&$(e,i)&&"body"!==P(e)})):[]}(e):[].concat(t),s=[].concat(n,[i]),o=s[0],r=s.reduce((function(t,i){var n=pe(e,i);return t.top=R(n.top,t.top),t.right=D(n.right,t.right),t.bottom=D(n.bottom,t.bottom),t.left=R(n.left,t.left),t}),pe(e,o));return r.width=r.right-r.left,r.height=r.bottom-r.top,r.x=r.left,r.y=r.top,r}(x(O)?O:O.contextElement||q(e.elements.popper),d,g),L=j(e.elements.reference),S=me({reference:L,element:I,strategy:"absolute",placement:a}),k=fe(Object.assign({},I,S)),F=v===p?k:L,M={top:C.top-F.top+T.top,bottom:F.bottom-C.bottom+T.bottom,left:C.left-F.left+T.left,right:F.right-C.right+T.right},B=e.modifiersData.offset;if(v===p&&B){var V=B[a];Object.keys(M).forEach((function(e){var t=[r,o].indexOf(e)>=0?1:-1,i=[s,o].indexOf(e)>=0?"y":"x";M[e]+=V[i]*t}))}return M}const _e={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,i=e.options,n=e.name;if(!t.modifiersData[n]._skip){for(var u=i.mainAxis,h=void 0===u||u,f=i.altAxis,p=void 0===f||f,m=i.fallbackPlacements,v=i.padding,b=i.boundary,y=i.rootBoundary,E=i.altBoundary,w=i.flipVariations,T=void 0===w||w,A=i.allowedAutoPlacements,I=t.options.placement,O=F(I),C=m||(O!==I&&T?function(e){if(F(e)===l)return[];var t=oe(e);return[ae(e),t,ae(t)]}(I):[oe(I)]),P=[I].concat(C).reduce((function(e,i){return e.concat(F(i)===l?function(e,t){void 0===t&&(t={});var i=t,n=i.placement,s=i.boundary,o=i.rootBoundary,r=i.padding,a=i.flipVariations,l=i.allowedAutoPlacements,d=void 0===l?_:l,u=Z(n),h=u?a?g:g.filter((function(e){return Z(e)===u})):c,f=h.filter((function(e){return d.indexOf(e)>=0}));0===f.length&&(f=h);var p=f.reduce((function(t,i){return t[i]=ge(e,{placement:i,boundary:s,rootBoundary:o,padding:r})[F(i)],t}),{});return Object.keys(p).sort((function(e,t){return p[e]-p[t]}))}(t,{placement:i,boundary:b,rootBoundary:y,padding:v,flipVariations:T,allowedAutoPlacements:A}):i)}),[]),L=t.rects.reference,x=t.rects.popper,N=new Map,S=!0,k=P[0],R=0;R<P.length;R++){var D=P[R],M=F(D),j=Z(D)===d,B=[s,o].indexOf(M)>=0,$=B?"width":"height",H=ge(t,{placement:D,boundary:b,rootBoundary:y,altBoundary:E,padding:v}),V=B?j?r:a:j?o:s;L[$]>x[$]&&(V=oe(V));var q=oe(V),U=[];if(h&&U.push(H[M]<=0),p&&U.push(H[V]<=0,H[q]<=0),U.every((function(e){return e}))){k=D,S=!1;break}N.set(D,U)}if(S)for(var W=function(e){var t=P.find((function(t){var i=N.get(t);if(i)return i.slice(0,e).every((function(e){return e}))}));if(t)return k=t,"break"},z=T?3:1;z>0&&"break"!==W(z);z--);t.placement!==k&&(t.modifiersData[n]._skip=!0,t.placement=k,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function ve(e,t,i){return void 0===i&&(i={x:0,y:0}),{top:e.top-t.height-i.y,right:e.right-t.width+i.x,bottom:e.bottom-t.height+i.y,left:e.left-t.width-i.x}}function be(e){return[s,r,o,a].some((function(t){return e[t]>=0}))}const ye={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,i=e.name,n=t.rects.reference,s=t.rects.popper,o=t.modifiersData.preventOverflow,r=ge(t,{elementContext:"reference"}),a=ge(t,{altBoundary:!0}),l=ve(r,n),c=ve(a,s,o),d=be(l),u=be(c);t.modifiersData[i]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:d,hasPopperEscaped:u},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":d,"data-popper-escaped":u})}},Ee={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,i=e.options,n=e.name,o=i.offset,l=void 0===o?[0,0]:o,c=_.reduce((function(e,i){return e[i]=function(e,t,i){var n=F(e),o=[a,s].indexOf(n)>=0?-1:1,l="function"==typeof i?i(Object.assign({},t,{placement:e})):i,c=l[0],d=l[1];return c=c||0,d=(d||0)*o,[a,r].indexOf(n)>=0?{x:d,y:c}:{x:c,y:d}}(i,t.rects,l),e}),{}),d=c[t.placement],u=d.x,h=d.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=u,t.modifiersData.popperOffsets.y+=h),t.modifiersData[n]=c}},we={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,i=e.name;t.modifiersData[i]=me({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},Te={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,i=e.options,n=e.name,l=i.mainAxis,c=void 0===l||l,u=i.altAxis,h=void 0!==u&&u,f=i.boundary,p=i.rootBoundary,m=i.altBoundary,g=i.padding,_=i.tether,v=void 0===_||_,b=i.tetherOffset,y=void 0===b?0:b,E=ge(t,{boundary:f,rootBoundary:p,padding:g,altBoundary:m}),w=F(t.placement),T=Z(t.placement),A=!T,I=Y(w),O="x"===I?"y":"x",C=t.modifiersData.popperOffsets,P=t.rects.reference,L=t.rects.popper,x="function"==typeof y?y(Object.assign({},t.rects,{placement:t.placement})):y,N="number"==typeof x?{mainAxis:x,altAxis:x}:Object.assign({mainAxis:0,altAxis:0},x),S=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,k={x:0,y:0};if(C){if(c){var M,j="y"===I?s:a,$="y"===I?o:r,H="y"===I?"height":"width",V=C[I],q=V+E[j],U=V-E[$],W=v?-L[H]/2:0,K=T===d?P[H]:L[H],X=T===d?-L[H]:-P[H],Q=t.elements.arrow,J=v&&Q?B(Q):{width:0,height:0},ee=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},te=ee[j],ie=ee[$],ne=G(0,P[H],J[H]),se=A?P[H]/2-W-ne-te-N.mainAxis:K-ne-te-N.mainAxis,oe=A?-P[H]/2+W+ne+ie+N.mainAxis:X+ne+ie+N.mainAxis,re=t.elements.arrow&&z(t.elements.arrow),ae=re?"y"===I?re.clientTop||0:re.clientLeft||0:0,le=null!=(M=null==S?void 0:S[I])?M:0,ce=V+oe-le,de=G(v?D(q,V+se-le-ae):q,V,v?R(U,ce):U);C[I]=de,k[I]=de-V}if(h){var ue,he="x"===I?s:a,fe="x"===I?o:r,pe=C[O],me="y"===O?"height":"width",_e=pe+E[he],ve=pe-E[fe],be=-1!==[s,a].indexOf(w),ye=null!=(ue=null==S?void 0:S[O])?ue:0,Ee=be?_e:pe-P[me]-L[me]-ye+N.altAxis,we=be?pe+P[me]+L[me]-ye-N.altAxis:ve,Te=v&&be?function(e,t,i){var n=G(e,t,i);return n>i?i:n}(Ee,pe,we):G(v?Ee:_e,pe,v?we:ve);C[O]=Te,k[O]=Te-pe}t.modifiersData[n]=k}},requiresIfExists:["offset"]};function Ae(e,t,i){void 0===i&&(i=!1);var n,s,o=N(t),r=N(t)&&function(e){var t=e.getBoundingClientRect(),i=M(t.width)/e.offsetWidth||1,n=M(t.height)/e.offsetHeight||1;return 1!==i||1!==n}(t),a=q(t),l=j(e,r),c={scrollLeft:0,scrollTop:0},d={x:0,y:0};return(o||!o&&!i)&&(("body"!==P(t)||de(a))&&(c=(n=t)!==L(n)&&N(n)?{scrollLeft:(s=n).scrollLeft,scrollTop:s.scrollTop}:le(n)),N(t)?((d=j(t,!0)).x+=t.clientLeft,d.y+=t.clientTop):a&&(d.x=ce(a))),{x:l.left+c.scrollLeft-d.x,y:l.top+c.scrollTop-d.y,width:l.width,height:l.height}}function Ie(e){var t=new Map,i=new Set,n=[];function s(e){i.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!i.has(e)){var n=t.get(e);n&&s(n)}})),n.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){i.has(e.name)||s(e)})),n}var Oe={placement:"bottom",modifiers:[],strategy:"absolute"};function Ce(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Pe(e){void 0===e&&(e={});var t=e,i=t.defaultModifiers,n=void 0===i?[]:i,s=t.defaultOptions,o=void 0===s?Oe:s;return function(e,t,i){void 0===i&&(i=o);var s,r,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Oe,o),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},l=[],c=!1,d={state:a,setOptions:function(i){var s="function"==typeof i?i(a.options):i;u(),a.options=Object.assign({},o,a.options,s),a.scrollParents={reference:x(e)?he(e):e.contextElement?he(e.contextElement):[],popper:he(t)};var r,c,h=function(e){var t=Ie(e);return C.reduce((function(e,i){return e.concat(t.filter((function(e){return e.phase===i})))}),[])}((r=[].concat(n,a.options.modifiers),c=r.reduce((function(e,t){var i=e[t.name];return e[t.name]=i?Object.assign({},i,t,{options:Object.assign({},i.options,t.options),data:Object.assign({},i.data,t.data)}):t,e}),{}),Object.keys(c).map((function(e){return c[e]}))));return a.orderedModifiers=h.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,i=e.options,n=void 0===i?{}:i,s=e.effect;if("function"==typeof s){var o=s({state:a,name:t,instance:d,options:n});l.push(o||function(){})}})),d.update()},forceUpdate:function(){if(!c){var e=a.elements,t=e.reference,i=e.popper;if(Ce(t,i)){a.rects={reference:Ae(t,z(i),"fixed"===a.options.strategy),popper:B(i)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var n=0;n<a.orderedModifiers.length;n++)if(!0!==a.reset){var s=a.orderedModifiers[n],o=s.fn,r=s.options,l=void 0===r?{}:r,u=s.name;"function"==typeof o&&(a=o({state:a,options:l,name:u,instance:d})||a)}else a.reset=!1,n=-1}}},update:(s=function(){return new Promise((function(e){d.forceUpdate(),e(a)}))},function(){return r||(r=new Promise((function(e){Promise.resolve().then((function(){r=void 0,e(s())}))}))),r}),destroy:function(){u(),c=!0}};if(!Ce(e,t))return d;function u(){l.forEach((function(e){return e()})),l=[]}return d.setOptions(i).then((function(e){!c&&i.onFirstUpdate&&i.onFirstUpdate(e)})),d}}var Le=Pe(),xe=Pe({defaultModifiers:[ne,we,te,k,Ee,_e,Te,Q,ye]}),Ne=Pe({defaultModifiers:[ne,we,te,k]});const Se="transitionend",ke=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let i=e.getAttribute("href");if(!i||!i.includes("#")&&!i.startsWith("."))return null;i.includes("#")&&!i.startsWith("#")&&(i=`#${i.split("#")[1]}`),t=i&&"#"!==i?i.trim():null}return t},Fe=e=>{const t=ke(e);return t&&document.querySelector(t)?t:null},Re=e=>{const t=ke(e);return t?document.querySelector(t):null},De=e=>{e.dispatchEvent(new Event(Se))},Me=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),je=e=>Me(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(e):null,Be=(e,t,i)=>{Object.keys(i).forEach((n=>{const s=i[n],o=t[n],r=o&&Me(o)?"element":null==(a=o)?`${a}`:{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase();var a;if(!new RegExp(s).test(r))throw new TypeError(`${e.toUpperCase()}: Option "${n}" provided type "${r}" but expected type "${s}".`)}))},$e=e=>!(!Me(e)||0===e.getClientRects().length)&&"visible"===getComputedStyle(e).getPropertyValue("visibility"),He=e=>!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")),Ve=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?Ve(e.parentNode):null},qe=()=>{},Ue=e=>{e.offsetHeight},We=()=>{const{jQuery:e}=window;return e&&!document.body.hasAttribute("data-bs-no-jquery")?e:null},ze=[],Ye=()=>"rtl"===document.documentElement.dir,Ge=e=>{var t;t=()=>{const t=We();if(t){const i=e.NAME,n=t.fn[i];t.fn[i]=e.jQueryInterface,t.fn[i].Constructor=e,t.fn[i].noConflict=()=>(t.fn[i]=n,e.jQueryInterface)}},"loading"===document.readyState?(ze.length||document.addEventListener("DOMContentLoaded",(()=>{ze.forEach((e=>e()))})),ze.push(t)):t()},Ke=e=>{"function"==typeof e&&e()},Xe=(e,t,i=!0)=>{if(!i)return void Ke(e);const n=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:i}=window.getComputedStyle(e);const n=Number.parseFloat(t),s=Number.parseFloat(i);return n||s?(t=t.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(i))):0})(t)+5;let s=!1;const o=({target:i})=>{i===t&&(s=!0,t.removeEventListener(Se,o),Ke(e))};t.addEventListener(Se,o),setTimeout((()=>{s||De(t)}),n)},Qe=(e,t,i,n)=>{let s=e.indexOf(t);if(-1===s)return e[!i&&n?e.length-1:0];const o=e.length;return s+=i?1:-1,n&&(s=(s+o)%o),e[Math.max(0,Math.min(s,o-1))]},Ze=/[^.]*(?=\..*)\.|.*/,Je=/\..*/,et=/::\d+$/,tt={};let it=1;const nt={mouseenter:"mouseover",mouseleave:"mouseout"},st=/^(mouseenter|mouseleave)/i,ot=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function rt(e,t){return t&&`${t}::${it++}`||e.uidEvent||it++}function at(e){const t=rt(e);return e.uidEvent=t,tt[t]=tt[t]||{},tt[t]}function lt(e,t,i=null){const n=Object.keys(e);for(let s=0,o=n.length;s<o;s++){const o=e[n[s]];if(o.originalHandler===t&&o.delegationSelector===i)return o}return null}function ct(e,t,i){const n="string"==typeof t,s=n?i:t;let o=ht(e);return ot.has(o)||(o=e),[n,s,o]}function dt(e,t,i,n,s){if("string"!=typeof t||!e)return;if(i||(i=n,n=null),st.test(t)){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};n?n=e(n):i=e(i)}const[o,r,a]=ct(t,i,n),l=at(e),c=l[a]||(l[a]={}),d=lt(c,r,o?i:null);if(d)return void(d.oneOff=d.oneOff&&s);const u=rt(r,t.replace(Ze,"")),h=o?function(e,t,i){return function n(s){const o=e.querySelectorAll(t);for(let{target:r}=s;r&&r!==this;r=r.parentNode)for(let a=o.length;a--;)if(o[a]===r)return s.delegateTarget=r,n.oneOff&&ft.off(e,s.type,t,i),i.apply(r,[s]);return null}}(e,i,n):function(e,t){return function i(n){return n.delegateTarget=e,i.oneOff&&ft.off(e,n.type,t),t.apply(e,[n])}}(e,i);h.delegationSelector=o?i:null,h.originalHandler=r,h.oneOff=s,h.uidEvent=u,c[u]=h,e.addEventListener(a,h,o)}function ut(e,t,i,n,s){const o=lt(t[i],n,s);o&&(e.removeEventListener(i,o,Boolean(s)),delete t[i][o.uidEvent])}function ht(e){return e=e.replace(Je,""),nt[e]||e}const ft={on(e,t,i,n){dt(e,t,i,n,!1)},one(e,t,i,n){dt(e,t,i,n,!0)},off(e,t,i,n){if("string"!=typeof t||!e)return;const[s,o,r]=ct(t,i,n),a=r!==t,l=at(e),c=t.startsWith(".");if(void 0!==o){if(!l||!l[r])return;return void ut(e,l,r,o,s?i:null)}c&&Object.keys(l).forEach((i=>{!function(e,t,i,n){const s=t[i]||{};Object.keys(s).forEach((o=>{if(o.includes(n)){const n=s[o];ut(e,t,i,n.originalHandler,n.delegationSelector)}}))}(e,l,i,t.slice(1))}));const d=l[r]||{};Object.keys(d).forEach((i=>{const n=i.replace(et,"");if(!a||t.includes(n)){const t=d[i];ut(e,l,r,t.originalHandler,t.delegationSelector)}}))},trigger(e,t,i){if("string"!=typeof t||!e)return null;const n=We(),s=ht(t),o=t!==s,r=ot.has(s);let a,l=!0,c=!0,d=!1,u=null;return o&&n&&(a=n.Event(t,i),n(e).trigger(a),l=!a.isPropagationStopped(),c=!a.isImmediatePropagationStopped(),d=a.isDefaultPrevented()),r?(u=document.createEvent("HTMLEvents"),u.initEvent(s,l,!0)):u=new CustomEvent(t,{bubbles:l,cancelable:!0}),void 0!==i&&Object.keys(i).forEach((e=>{Object.defineProperty(u,e,{get:()=>i[e]})})),d&&u.preventDefault(),c&&e.dispatchEvent(u),u.defaultPrevented&&void 0!==a&&a.preventDefault(),u}},pt=new Map,mt={set(e,t,i){pt.has(e)||pt.set(e,new Map);const n=pt.get(e);n.has(t)||0===n.size?n.set(t,i):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(n.keys())[0]}.`)},get:(e,t)=>pt.has(e)&&pt.get(e).get(t)||null,remove(e,t){if(!pt.has(e))return;const i=pt.get(e);i.delete(t),0===i.size&&pt.delete(e)}};class gt{constructor(e){(e=je(e))&&(this._element=e,mt.set(this._element,this.constructor.DATA_KEY,this))}dispose(){mt.remove(this._element,this.constructor.DATA_KEY),ft.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((e=>{this[e]=null}))}_queueCallback(e,t,i=!0){Xe(e,t,i)}static getInstance(e){return mt.get(je(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.1.3"}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}const _t=(e,t="hide")=>{const i=`click.dismiss${e.EVENT_KEY}`,n=e.NAME;ft.on(document,i,`[data-bs-dismiss="${n}"]`,(function(i){if(["A","AREA"].includes(this.tagName)&&i.preventDefault(),He(this))return;const s=Re(this)||this.closest(`.${n}`);e.getOrCreateInstance(s)[t]()}))};class vt extends gt{static get NAME(){return"alert"}close(){if(ft.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),ft.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=vt.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}_t(vt,"close"),Ge(vt);const bt='[data-bs-toggle="button"]';class yt extends gt{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=yt.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}function Et(e){return"true"===e||"false"!==e&&(e===Number(e).toString()?Number(e):""===e||"null"===e?null:e)}function wt(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}ft.on(document,"click.bs.button.data-api",bt,(e=>{e.preventDefault();const t=e.target.closest(bt);yt.getOrCreateInstance(t).toggle()})),Ge(yt);const Tt={setDataAttribute(e,t,i){e.setAttribute(`data-bs-${wt(t)}`,i)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${wt(t)}`)},getDataAttributes(e){if(!e)return{};const t={};return Object.keys(e.dataset).filter((e=>e.startsWith("bs"))).forEach((i=>{let n=i.replace(/^bs/,"");n=n.charAt(0).toLowerCase()+n.slice(1,n.length),t[n]=Et(e.dataset[i])})),t},getDataAttribute:(e,t)=>Et(e.getAttribute(`data-bs-${wt(t)}`)),offset(e){const t=e.getBoundingClientRect();return{top:t.top+window.pageYOffset,left:t.left+window.pageXOffset}},position:e=>({top:e.offsetTop,left:e.offsetLeft})},At={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const i=[];let n=e.parentNode;for(;n&&n.nodeType===Node.ELEMENT_NODE&&3!==n.nodeType;)n.matches(t)&&i.push(n),n=n.parentNode;return i},prev(e,t){let i=e.previousElementSibling;for(;i;){if(i.matches(t))return[i];i=i.previousElementSibling}return[]},next(e,t){let i=e.nextElementSibling;for(;i;){if(i.matches(t))return[i];i=i.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(", ");return this.find(t,e).filter((e=>!He(e)&&$e(e)))}},It="carousel",Ot={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Ct={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},Pt="next",Lt="prev",xt="left",Nt="right",St={ArrowLeft:Nt,ArrowRight:xt},kt="slid.bs.carousel",Ft="active",Rt=".active.carousel-item";class Dt extends gt{constructor(e,t){super(e),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._indicatorsElement=At.findOne(".carousel-indicators",this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return Ot}static get NAME(){return It}next(){this._slide(Pt)}nextWhenVisible(){!document.hidden&&$e(this._element)&&this.next()}prev(){this._slide(Lt)}pause(e){e||(this._isPaused=!0),At.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(De(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(e){this._activeElement=At.findOne(Rt,this._element);const t=this._getItemIndex(this._activeElement);if(e>this._items.length-1||e<0)return;if(this._isSliding)return void ft.one(this._element,kt,(()=>this.to(e)));if(t===e)return this.pause(),void this.cycle();const i=e>t?Pt:Lt;this._slide(i,this._items[e])}_getConfig(e){return e={...Ot,...Tt.getDataAttributes(this._element),..."object"==typeof e?e:{}},Be(It,e,Ct),e}_handleSwipe(){const e=Math.abs(this.touchDeltaX);if(e<=40)return;const t=e/this.touchDeltaX;this.touchDeltaX=0,t&&this._slide(t>0?Nt:xt)}_addEventListeners(){this._config.keyboard&&ft.on(this._element,"keydown.bs.carousel",(e=>this._keydown(e))),"hover"===this._config.pause&&(ft.on(this._element,"mouseenter.bs.carousel",(e=>this.pause(e))),ft.on(this._element,"mouseleave.bs.carousel",(e=>this.cycle(e)))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const e=e=>this._pointerEvent&&("pen"===e.pointerType||"touch"===e.pointerType),t=t=>{e(t)?this.touchStartX=t.clientX:this._pointerEvent||(this.touchStartX=t.touches[0].clientX)},i=e=>{this.touchDeltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this.touchStartX},n=t=>{e(t)&&(this.touchDeltaX=t.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((e=>this.cycle(e)),500+this._config.interval))};At.find(".carousel-item img",this._element).forEach((e=>{ft.on(e,"dragstart.bs.carousel",(e=>e.preventDefault()))})),this._pointerEvent?(ft.on(this._element,"pointerdown.bs.carousel",(e=>t(e))),ft.on(this._element,"pointerup.bs.carousel",(e=>n(e))),this._element.classList.add("pointer-event")):(ft.on(this._element,"touchstart.bs.carousel",(e=>t(e))),ft.on(this._element,"touchmove.bs.carousel",(e=>i(e))),ft.on(this._element,"touchend.bs.carousel",(e=>n(e))))}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=St[e.key];t&&(e.preventDefault(),this._slide(t))}_getItemIndex(e){return this._items=e&&e.parentNode?At.find(".carousel-item",e.parentNode):[],this._items.indexOf(e)}_getItemByOrder(e,t){const i=e===Pt;return Qe(this._items,t,i,this._config.wrap)}_triggerSlideEvent(e,t){const i=this._getItemIndex(e),n=this._getItemIndex(At.findOne(Rt,this._element));return ft.trigger(this._element,"slide.bs.carousel",{relatedTarget:e,direction:t,from:n,to:i})}_setActiveIndicatorElement(e){if(this._indicatorsElement){const t=At.findOne(".active",this._indicatorsElement);t.classList.remove(Ft),t.removeAttribute("aria-current");const i=At.find("[data-bs-target]",this._indicatorsElement);for(let t=0;t<i.length;t++)if(Number.parseInt(i[t].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(e)){i[t].classList.add(Ft),i[t].setAttribute("aria-current","true");break}}}_updateInterval(){const e=this._activeElement||At.findOne(Rt,this._element);if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);t?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=t):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(e,t){const i=this._directionToOrder(e),n=At.findOne(Rt,this._element),s=this._getItemIndex(n),o=t||this._getItemByOrder(i,n),r=this._getItemIndex(o),a=Boolean(this._interval),l=i===Pt,c=l?"carousel-item-start":"carousel-item-end",d=l?"carousel-item-next":"carousel-item-prev",u=this._orderToDirection(i);if(o&&o.classList.contains(Ft))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(o,u).defaultPrevented)return;if(!n||!o)return;this._isSliding=!0,a&&this.pause(),this._setActiveIndicatorElement(o),this._activeElement=o;const h=()=>{ft.trigger(this._element,kt,{relatedTarget:o,direction:u,from:s,to:r})};if(this._element.classList.contains("slide")){o.classList.add(d),Ue(o),n.classList.add(c),o.classList.add(c);const e=()=>{o.classList.remove(c,d),o.classList.add(Ft),n.classList.remove(Ft,d,c),this._isSliding=!1,setTimeout(h,0)};this._queueCallback(e,n,!0)}else n.classList.remove(Ft),o.classList.add(Ft),this._isSliding=!1,h();a&&this.cycle()}_directionToOrder(e){return[Nt,xt].includes(e)?Ye()?e===xt?Lt:Pt:e===xt?Pt:Lt:e}_orderToDirection(e){return[Pt,Lt].includes(e)?Ye()?e===Lt?xt:Nt:e===Lt?Nt:xt:e}static carouselInterface(e,t){const i=Dt.getOrCreateInstance(e,t);let{_config:n}=i;"object"==typeof t&&(n={...n,...t});const s="string"==typeof t?t:n.slide;if("number"==typeof t)i.to(t);else if("string"==typeof s){if(void 0===i[s])throw new TypeError(`No method named "${s}"`);i[s]()}else n.interval&&n.ride&&(i.pause(),i.cycle())}static jQueryInterface(e){return this.each((function(){Dt.carouselInterface(this,e)}))}static dataApiClickHandler(e){const t=Re(this);if(!t||!t.classList.contains("carousel"))return;const i={...Tt.getDataAttributes(t),...Tt.getDataAttributes(this)},n=this.getAttribute("data-bs-slide-to");n&&(i.interval=!1),Dt.carouselInterface(t,i),n&&Dt.getInstance(t).to(n),e.preventDefault()}}ft.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",Dt.dataApiClickHandler),ft.on(window,"load.bs.carousel.data-api",(()=>{const e=At.find('[data-bs-ride="carousel"]');for(let t=0,i=e.length;t<i;t++)Dt.carouselInterface(e[t],Dt.getInstance(e[t]))})),Ge(Dt);const Mt="collapse",jt={toggle:!0,parent:null},Bt={toggle:"boolean",parent:"(null|element)"},$t="show",Ht="collapse",Vt="collapsing",qt="collapsed",Ut=":scope .collapse .collapse",Wt='[data-bs-toggle="collapse"]';class zt extends gt{constructor(e,t){super(e),this._isTransitioning=!1,this._config=this._getConfig(t),this._triggerArray=[];const i=At.find(Wt);for(let e=0,t=i.length;e<t;e++){const t=i[e],n=Fe(t),s=At.find(n).filter((e=>e===this._element));null!==n&&s.length&&(this._selector=n,this._triggerArray.push(t))}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return jt}static get NAME(){return Mt}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e,t=[];if(this._config.parent){const e=At.find(Ut,this._config.parent);t=At.find(".collapse.show, .collapse.collapsing",this._config.parent).filter((t=>!e.includes(t)))}const i=At.findOne(this._selector);if(t.length){const n=t.find((e=>i!==e));if(e=n?zt.getInstance(n):null,e&&e._isTransitioning)return}if(ft.trigger(this._element,"show.bs.collapse").defaultPrevented)return;t.forEach((t=>{i!==t&&zt.getOrCreateInstance(t,{toggle:!1}).hide(),e||mt.set(t,"bs.collapse",null)}));const n=this._getDimension();this._element.classList.remove(Ht),this._element.classList.add(Vt),this._element.style[n]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const s=`scroll${n[0].toUpperCase()+n.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Vt),this._element.classList.add(Ht,$t),this._element.style[n]="",ft.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[n]=`${this._element[s]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(ft.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,Ue(this._element),this._element.classList.add(Vt),this._element.classList.remove(Ht,$t);const t=this._triggerArray.length;for(let e=0;e<t;e++){const t=this._triggerArray[e],i=Re(t);i&&!this._isShown(i)&&this._addAriaAndCollapsedClass([t],!1)}this._isTransitioning=!0,this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Vt),this._element.classList.add(Ht),ft.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}_isShown(e=this._element){return e.classList.contains($t)}_getConfig(e){return(e={...jt,...Tt.getDataAttributes(this._element),...e}).toggle=Boolean(e.toggle),e.parent=je(e.parent),Be(Mt,e,Bt),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=At.find(Ut,this._config.parent);At.find(Wt,this._config.parent).filter((t=>!e.includes(t))).forEach((e=>{const t=Re(e);t&&this._addAriaAndCollapsedClass([e],this._isShown(t))}))}_addAriaAndCollapsedClass(e,t){e.length&&e.forEach((e=>{t?e.classList.remove(qt):e.classList.add(qt),e.setAttribute("aria-expanded",t)}))}static jQueryInterface(e){return this.each((function(){const t={};"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1);const i=zt.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===i[e])throw new TypeError(`No method named "${e}"`);i[e]()}}))}}ft.on(document,"click.bs.collapse.data-api",Wt,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();const t=Fe(this);At.find(t).forEach((e=>{zt.getOrCreateInstance(e,{toggle:!1}).toggle()}))})),Ge(zt);const Yt="dropdown",Gt="Escape",Kt="Space",Xt="ArrowUp",Qt="ArrowDown",Zt=new RegExp("ArrowUp|ArrowDown|Escape"),Jt="click.bs.dropdown.data-api",ei="keydown.bs.dropdown.data-api",ti="show",ii='[data-bs-toggle="dropdown"]',ni=".dropdown-menu",si=Ye()?"top-end":"top-start",oi=Ye()?"top-start":"top-end",ri=Ye()?"bottom-end":"bottom-start",ai=Ye()?"bottom-start":"bottom-end",li=Ye()?"left-start":"right-start",ci=Ye()?"right-start":"left-start",di={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},ui={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class hi extends gt{constructor(e,t){super(e),this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar()}static get Default(){return di}static get DefaultType(){return ui}static get NAME(){return Yt}toggle(){return this._isShown()?this.hide():this.show()}show(){if(He(this._element)||this._isShown(this._menu))return;const e={relatedTarget:this._element};if(ft.trigger(this._element,"show.bs.dropdown",e).defaultPrevented)return;const t=hi.getParentFromElement(this._element);this._inNavbar?Tt.setDataAttribute(this._menu,"popper","none"):this._createPopper(t),"ontouchstart"in document.documentElement&&!t.closest(".navbar-nav")&&[].concat(...document.body.children).forEach((e=>ft.on(e,"mouseover",qe))),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(ti),this._element.classList.add(ti),ft.trigger(this._element,"shown.bs.dropdown",e)}hide(){if(He(this._element)||!this._isShown(this._menu))return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){ft.trigger(this._element,"hide.bs.dropdown",e).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>ft.off(e,"mouseover",qe))),this._popper&&this._popper.destroy(),this._menu.classList.remove(ti),this._element.classList.remove(ti),this._element.setAttribute("aria-expanded","false"),Tt.removeDataAttribute(this._menu,"popper"),ft.trigger(this._element,"hidden.bs.dropdown",e))}_getConfig(e){if(e={...this.constructor.Default,...Tt.getDataAttributes(this._element),...e},Be(Yt,e,this.constructor.DefaultType),"object"==typeof e.reference&&!Me(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Yt.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(e){if(void 0===n)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let t=this._element;"parent"===this._config.reference?t=e:Me(this._config.reference)?t=je(this._config.reference):"object"==typeof this._config.reference&&(t=this._config.reference);const i=this._getPopperConfig(),s=i.modifiers.find((e=>"applyStyles"===e.name&&!1===e.enabled));this._popper=xe(t,this._menu,i),s&&Tt.setDataAttribute(this._menu,"popper","static")}_isShown(e=this._element){return e.classList.contains(ti)}_getMenuElement(){return At.next(this._element,ni)[0]}_getPlacement(){const e=this._element.parentNode;if(e.classList.contains("dropend"))return li;if(e.classList.contains("dropstart"))return ci;const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?oi:si:t?ai:ri}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_selectMenuItem({key:e,target:t}){const i=At.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter($e);i.length&&Qe(i,t,e===Qt,!i.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=hi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(e&&(2===e.button||"keyup"===e.type&&"Tab"!==e.key))return;const t=At.find(ii);for(let i=0,n=t.length;i<n;i++){const n=hi.getInstance(t[i]);if(!n||!1===n._config.autoClose)continue;if(!n._isShown())continue;const s={relatedTarget:n._element};if(e){const t=e.composedPath(),i=t.includes(n._menu);if(t.includes(n._element)||"inside"===n._config.autoClose&&!i||"outside"===n._config.autoClose&&i)continue;if(n._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;"click"===e.type&&(s.clickEvent=e)}n._completeHide(s)}}static getParentFromElement(e){return Re(e)||e.parentNode}static dataApiKeydownHandler(e){if(/input|textarea/i.test(e.target.tagName)?e.key===Kt||e.key!==Gt&&(e.key!==Qt&&e.key!==Xt||e.target.closest(ni)):!Zt.test(e.key))return;const t=this.classList.contains(ti);if(!t&&e.key===Gt)return;if(e.preventDefault(),e.stopPropagation(),He(this))return;const i=this.matches(ii)?this:At.prev(this,ii)[0],n=hi.getOrCreateInstance(i);if(e.key!==Gt)return e.key===Xt||e.key===Qt?(t||n.show(),void n._selectMenuItem(e)):void(t&&e.key!==Kt||hi.clearMenus());n.hide()}}ft.on(document,ei,ii,hi.dataApiKeydownHandler),ft.on(document,ei,ni,hi.dataApiKeydownHandler),ft.on(document,Jt,hi.clearMenus),ft.on(document,"keyup.bs.dropdown.data-api",hi.clearMenus),ft.on(document,Jt,ii,(function(e){e.preventDefault(),hi.getOrCreateInstance(this).toggle()})),Ge(hi);const fi=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",pi=".sticky-top";class mi{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",(t=>t+e)),this._setElementAttributes(fi,"paddingRight",(t=>t+e)),this._setElementAttributes(pi,"marginRight",(t=>t-e))}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,i){const n=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+n)return;this._saveInitialAttribute(e,t);const s=window.getComputedStyle(e)[t];e.style[t]=`${i(Number.parseFloat(s))}px`}))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(fi,"paddingRight"),this._resetElementAttributes(pi,"marginRight")}_saveInitialAttribute(e,t){const i=e.style[t];i&&Tt.setDataAttribute(e,t,i)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const i=Tt.getDataAttribute(e,t);void 0===i?e.style.removeProperty(t):(Tt.removeDataAttribute(e,t),e.style[t]=i)}))}_applyManipulationCallback(e,t){Me(e)?t(e):At.find(e,this._element).forEach(t)}isOverflowing(){return this.getWidth()>0}}const gi={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},_i={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},vi="show",bi="mousedown.bs.backdrop";class yi{constructor(e){this._config=this._getConfig(e),this._isAppended=!1,this._element=null}show(e){this._config.isVisible?(this._append(),this._config.isAnimated&&Ue(this._getElement()),this._getElement().classList.add(vi),this._emulateAnimation((()=>{Ke(e)}))):Ke(e)}hide(e){this._config.isVisible?(this._getElement().classList.remove(vi),this._emulateAnimation((()=>{this.dispose(),Ke(e)}))):Ke(e)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_getConfig(e){return(e={...gi,..."object"==typeof e?e:{}}).rootElement=je(e.rootElement),Be("backdrop",e,_i),e}_append(){this._isAppended||(this._config.rootElement.append(this._getElement()),ft.on(this._getElement(),bi,(()=>{Ke(this._config.clickCallback)})),this._isAppended=!0)}dispose(){this._isAppended&&(ft.off(this._element,bi),this._element.remove(),this._isAppended=!1)}_emulateAnimation(e){Xe(e,this._getElement(),this._config.isAnimated)}}const Ei={trapElement:null,autofocus:!0},wi={trapElement:"element",autofocus:"boolean"},Ti=".bs.focustrap",Ai="backward";class Ii{constructor(e){this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}activate(){const{trapElement:e,autofocus:t}=this._config;this._isActive||(t&&e.focus(),ft.off(document,Ti),ft.on(document,"focusin.bs.focustrap",(e=>this._handleFocusin(e))),ft.on(document,"keydown.tab.bs.focustrap",(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,ft.off(document,Ti))}_handleFocusin(e){const{target:t}=e,{trapElement:i}=this._config;if(t===document||t===i||i.contains(t))return;const n=At.focusableChildren(i);0===n.length?i.focus():this._lastTabNavDirection===Ai?n[n.length-1].focus():n[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?Ai:"forward")}_getConfig(e){return e={...Ei,..."object"==typeof e?e:{}},Be("focustrap",e,wi),e}}const Oi="modal",Ci="Escape",Pi={backdrop:!0,keyboard:!0,focus:!0},Li={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},xi="hidden.bs.modal",Ni="show.bs.modal",Si="resize.bs.modal",ki="click.dismiss.bs.modal",Fi="keydown.dismiss.bs.modal",Ri="mousedown.dismiss.bs.modal",Di="modal-open",Mi="show",ji="modal-static";class Bi extends gt{constructor(e,t){super(e),this._config=this._getConfig(t),this._dialog=At.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new mi}static get Default(){return Pi}static get NAME(){return Oi}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||ft.trigger(this._element,Ni,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(Di),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),ft.on(this._dialog,Ri,(()=>{ft.one(this._element,"mouseup.dismiss.bs.modal",(e=>{e.target===this._element&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(e))))}hide(){if(!this._isShown||this._isTransitioning)return;if(ft.trigger(this._element,"hide.bs.modal").defaultPrevented)return;this._isShown=!1;const e=this._isAnimated();e&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove(Mi),ft.off(this._element,ki),ft.off(this._dialog,Ri),this._queueCallback((()=>this._hideModal()),this._element,e)}dispose(){[window,this._dialog].forEach((e=>ft.off(e,".bs.modal"))),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new yi({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Ii({trapElement:this._element})}_getConfig(e){return e={...Pi,...Tt.getDataAttributes(this._element),..."object"==typeof e?e:{}},Be(Oi,e,Li),e}_showElement(e){const t=this._isAnimated(),i=At.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,i&&(i.scrollTop=0),t&&Ue(this._element),this._element.classList.add(Mi),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,ft.trigger(this._element,"shown.bs.modal",{relatedTarget:e})}),this._dialog,t)}_setEscapeEvent(){this._isShown?ft.on(this._element,Fi,(e=>{this._config.keyboard&&e.key===Ci?(e.preventDefault(),this.hide()):this._config.keyboard||e.key!==Ci||this._triggerBackdropTransition()})):ft.off(this._element,Fi)}_setResizeEvent(){this._isShown?ft.on(window,Si,(()=>this._adjustDialog())):ft.off(window,Si)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Di),this._resetAdjustments(),this._scrollBar.reset(),ft.trigger(this._element,xi)}))}_showBackdrop(e){ft.on(this._element,ki,(e=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:e.target===e.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())})),this._backdrop.show(e)}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(ft.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const{classList:e,scrollHeight:t,style:i}=this._element,n=t>document.documentElement.clientHeight;!n&&"hidden"===i.overflowY||e.contains(ji)||(n||(i.overflowY="hidden"),e.add(ji),this._queueCallback((()=>{e.remove(ji),n||this._queueCallback((()=>{i.overflowY=""}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),i=t>0;(!i&&e&&!Ye()||i&&!e&&Ye())&&(this._element.style.paddingLeft=`${t}px`),(i&&!e&&!Ye()||!i&&e&&Ye())&&(this._element.style.paddingRight=`${t}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const i=Bi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===i[e])throw new TypeError(`No method named "${e}"`);i[e](t)}}))}}ft.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(e){const t=Re(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),ft.one(t,Ni,(e=>{e.defaultPrevented||ft.one(t,xi,(()=>{$e(this)&&this.focus()}))}));const i=At.findOne(".modal.show");i&&Bi.getInstance(i).hide(),Bi.getOrCreateInstance(t).toggle(this)})),_t(Bi),Ge(Bi);const $i="offcanvas",Hi={backdrop:!0,keyboard:!0,scroll:!1},Vi={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},qi="show",Ui=".offcanvas.show",Wi="hidden.bs.offcanvas";class zi extends gt{constructor(e,t){super(e),this._config=this._getConfig(t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get NAME(){return $i}static get Default(){return Hi}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||ft.trigger(this._element,"show.bs.offcanvas",{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new mi).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(qi),this._queueCallback((()=>{this._config.scroll||this._focustrap.activate(),ft.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:e})}),this._element,!0))}hide(){this._isShown&&(ft.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove(qi),this._backdrop.hide(),this._queueCallback((()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new mi).reset(),ft.trigger(this._element,Wi)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_getConfig(e){return e={...Hi,...Tt.getDataAttributes(this._element),..."object"==typeof e?e:{}},Be($i,e,Vi),e}_initializeBackDrop(){return new yi({className:"offcanvas-backdrop",isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_initializeFocusTrap(){return new Ii({trapElement:this._element})}_addEventListeners(){ft.on(this._element,"keydown.dismiss.bs.offcanvas",(e=>{this._config.keyboard&&"Escape"===e.key&&this.hide()}))}static jQueryInterface(e){return this.each((function(){const t=zi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}ft.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(e){const t=Re(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),He(this))return;ft.one(t,Wi,(()=>{$e(this)&&this.focus()}));const i=At.findOne(Ui);i&&i!==t&&zi.getInstance(i).hide(),zi.getOrCreateInstance(t).toggle(this)})),ft.on(window,"load.bs.offcanvas.data-api",(()=>At.find(Ui).forEach((e=>zi.getOrCreateInstance(e).show())))),_t(zi),Ge(zi);const Yi=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Gi=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Ki=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Xi=(e,t)=>{const i=e.nodeName.toLowerCase();if(t.includes(i))return!Yi.has(i)||Boolean(Gi.test(e.nodeValue)||Ki.test(e.nodeValue));const n=t.filter((e=>e instanceof RegExp));for(let e=0,t=n.length;e<t;e++)if(n[e].test(i))return!0;return!1};function Qi(e,t,i){if(!e.length)return e;if(i&&"function"==typeof i)return i(e);const n=(new window.DOMParser).parseFromString(e,"text/html"),s=[].concat(...n.body.querySelectorAll("*"));for(let e=0,i=s.length;e<i;e++){const i=s[e],n=i.nodeName.toLowerCase();if(!Object.keys(t).includes(n)){i.remove();continue}const o=[].concat(...i.attributes),r=[].concat(t["*"]||[],t[n]||[]);o.forEach((e=>{Xi(e,r)||i.removeAttribute(e.nodeName)}))}return n.body.innerHTML}const Zi="tooltip",Ji=new Set(["sanitize","allowList","sanitizeFn"]),en={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},tn={AUTO:"auto",TOP:"top",RIGHT:Ye()?"left":"right",BOTTOM:"bottom",LEFT:Ye()?"right":"left"},nn={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},sn={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},on="fade",rn="show",an="show",ln="out",cn=".tooltip-inner",dn=".modal",un="hide.bs.modal",hn="hover",fn="focus";class pn extends gt{constructor(e,t){if(void 0===n)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(t),this.tip=null,this._setListeners()}static get Default(){return nn}static get NAME(){return Zi}static get Event(){return sn}static get DefaultType(){return en}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(e){if(this._isEnabled)if(e){const t=this._initializeOnDelegatedTarget(e);t._activeTrigger.click=!t._activeTrigger.click,t._isWithActiveTrigger()?t._enter(null,t):t._leave(null,t)}else{if(this.getTipElement().classList.contains(rn))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),ft.off(this._element.closest(dn),un,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const e=ft.trigger(this._element,this.constructor.Event.SHOW),t=Ve(this._element),i=null===t?this._element.ownerDocument.documentElement.contains(this._element):t.contains(this._element);if(e.defaultPrevented||!i)return;"tooltip"===this.constructor.NAME&&this.tip&&this.getTitle()!==this.tip.querySelector(cn).innerHTML&&(this._disposePopper(),this.tip.remove(),this.tip=null);const n=this.getTipElement(),s=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME);n.setAttribute("id",s),this._element.setAttribute("aria-describedby",s),this._config.animation&&n.classList.add(on);const o="function"==typeof this._config.placement?this._config.placement.call(this,n,this._element):this._config.placement,r=this._getAttachment(o);this._addAttachmentClass(r);const{container:a}=this._config;mt.set(n,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(a.append(n),ft.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=xe(this._element,n,this._getPopperConfig(r)),n.classList.add(rn);const l=this._resolvePossibleFunction(this._config.customClass);l&&n.classList.add(...l.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>{ft.on(e,"mouseover",qe)}));const c=this.tip.classList.contains(on);this._queueCallback((()=>{const e=this._hoverState;this._hoverState=null,ft.trigger(this._element,this.constructor.Event.SHOWN),e===ln&&this._leave(null,this)}),this.tip,c)}hide(){if(!this._popper)return;const e=this.getTipElement();if(ft.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;e.classList.remove(rn),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>ft.off(e,"mouseover",qe))),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1;const t=this.tip.classList.contains(on);this._queueCallback((()=>{this._isWithActiveTrigger()||(this._hoverState!==an&&e.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),ft.trigger(this._element,this.constructor.Event.HIDDEN),this._disposePopper())}),this.tip,t),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const e=document.createElement("div");e.innerHTML=this._config.template;const t=e.children[0];return this.setContent(t),t.classList.remove(on,rn),this.tip=t,this.tip}setContent(e){this._sanitizeAndSetContent(e,this.getTitle(),cn)}_sanitizeAndSetContent(e,t,i){const n=At.findOne(i,e);t||!n?this.setElementContent(n,t):n.remove()}setElementContent(e,t){if(null!==e)return Me(t)?(t=je(t),void(this._config.html?t.parentNode!==e&&(e.innerHTML="",e.append(t)):e.textContent=t.textContent)):void(this._config.html?(this._config.sanitize&&(t=Qi(t,this._config.allowList,this._config.sanitizeFn)),e.innerHTML=t):e.textContent=t)}getTitle(){const e=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(e)}updateAttachment(e){return"right"===e?"end":"left"===e?"start":e}_initializeOnDelegatedTarget(e,t){return t||this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return"function"==typeof e?e.call(this._element):e}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:e=>this._handlePopperPlacementChange(e)}],onFirstUpdate:e=>{e.options.placement!==e.placement&&this._handlePopperPlacementChange(e)}};return{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_addAttachmentClass(e){this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(e)}`)}_getAttachment(e){return tn[e.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach((e=>{if("click"===e)ft.on(this._element,this.constructor.Event.CLICK,this._config.selector,(e=>this.toggle(e)));else if("manual"!==e){const t=e===hn?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,i=e===hn?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;ft.on(this._element,t,this._config.selector,(e=>this._enter(e))),ft.on(this._element,i,this._config.selector,(e=>this._leave(e)))}})),this._hideModalHandler=()=>{this._element&&this.hide()},ft.on(this._element.closest(dn),un,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const e=this._element.getAttribute("title"),t=typeof this._element.getAttribute("data-bs-original-title");(e||"string"!==t)&&(this._element.setAttribute("data-bs-original-title",e||""),!e||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",e),this._element.setAttribute("title",""))}_enter(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusin"===e.type?fn:hn]=!0),t.getTipElement().classList.contains(rn)||t._hoverState===an?t._hoverState=an:(clearTimeout(t._timeout),t._hoverState=an,t._config.delay&&t._config.delay.show?t._timeout=setTimeout((()=>{t._hoverState===an&&t.show()}),t._config.delay.show):t.show())}_leave(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusout"===e.type?fn:hn]=t._element.contains(e.relatedTarget)),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState=ln,t._config.delay&&t._config.delay.hide?t._timeout=setTimeout((()=>{t._hoverState===ln&&t.hide()}),t._config.delay.hide):t.hide())}_isWithActiveTrigger(){for(const e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1}_getConfig(e){const t=Tt.getDataAttributes(this._element);return Object.keys(t).forEach((e=>{Ji.has(e)&&delete t[e]})),(e={...this.constructor.Default,...t,..."object"==typeof e&&e?e:{}}).container=!1===e.container?document.body:je(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),Be(Zi,e,this.constructor.DefaultType),e.sanitize&&(e.template=Qi(e.template,e.allowList,e.sanitizeFn)),e}_getDelegateConfig(){const e={};for(const t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e}_cleanTipClass(){const e=this.getTipElement(),t=new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`,"g"),i=e.getAttribute("class").match(t);null!==i&&i.length>0&&i.map((e=>e.trim())).forEach((t=>e.classList.remove(t)))}_getBasicClassPrefix(){return"bs-tooltip"}_handlePopperPlacementChange(e){const{state:t}=e;t&&(this.tip=t.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(t.placement)))}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(e){return this.each((function(){const t=pn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Ge(pn);const mn={...pn.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},gn={...pn.DefaultType,content:"(string|element|function)"},_n={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"};class vn extends pn{static get Default(){return mn}static get NAME(){return"popover"}static get Event(){return _n}static get DefaultType(){return gn}isWithContent(){return this.getTitle()||this._getContent()}setContent(e){this._sanitizeAndSetContent(e,this.getTitle(),".popover-header"),this._sanitizeAndSetContent(e,this._getContent(),".popover-body")}_getContent(){return this._resolvePossibleFunction(this._config.content)}_getBasicClassPrefix(){return"bs-popover"}static jQueryInterface(e){return this.each((function(){const t=vn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Ge(vn);const bn="scrollspy",yn={offset:10,method:"auto",target:""},En={offset:"number",method:"string",target:"(string|element)"},wn="active",Tn=".nav-link, .list-group-item, .dropdown-item",An="position";class In extends gt{constructor(e,t){super(e),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(t),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,ft.on(this._scrollElement,"scroll.bs.scrollspy",(()=>this._process())),this.refresh(),this._process()}static get Default(){return yn}static get NAME(){return bn}refresh(){const e=this._scrollElement===this._scrollElement.window?"offset":An,t="auto"===this._config.method?e:this._config.method,i=t===An?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),At.find(Tn,this._config.target).map((e=>{const n=Fe(e),s=n?At.findOne(n):null;if(s){const e=s.getBoundingClientRect();if(e.width||e.height)return[Tt[t](s).top+i,n]}return null})).filter((e=>e)).sort(((e,t)=>e[0]-t[0])).forEach((e=>{this._offsets.push(e[0]),this._targets.push(e[1])}))}dispose(){ft.off(this._scrollElement,".bs.scrollspy"),super.dispose()}_getConfig(e){return(e={...yn,...Tt.getDataAttributes(this._element),..."object"==typeof e&&e?e:{}}).target=je(e.target)||document.documentElement,Be(bn,e,En),e}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),i=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=i){const e=this._targets[this._targets.length-1];this._activeTarget!==e&&this._activate(e)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let t=this._offsets.length;t--;)this._activeTarget!==this._targets[t]&&e>=this._offsets[t]&&(void 0===this._offsets[t+1]||e<this._offsets[t+1])&&this._activate(this._targets[t])}}_activate(e){this._activeTarget=e,this._clear();const t=Tn.split(",").map((t=>`${t}[data-bs-target="${e}"],${t}[href="${e}"]`)),i=At.findOne(t.join(","),this._config.target);i.classList.add(wn),i.classList.contains("dropdown-item")?At.findOne(".dropdown-toggle",i.closest(".dropdown")).classList.add(wn):At.parents(i,".nav, .list-group").forEach((e=>{At.prev(e,".nav-link, .list-group-item").forEach((e=>e.classList.add(wn))),At.prev(e,".nav-item").forEach((e=>{At.children(e,".nav-link").forEach((e=>e.classList.add(wn)))}))})),ft.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:e})}_clear(){At.find(Tn,this._config.target).filter((e=>e.classList.contains(wn))).forEach((e=>e.classList.remove(wn)))}static jQueryInterface(e){return this.each((function(){const t=In.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}ft.on(window,"load.bs.scrollspy.data-api",(()=>{At.find('[data-bs-spy="scroll"]').forEach((e=>new In(e)))})),Ge(In);const On="active",Cn="fade",Pn="show",Ln=".active",xn=":scope > li > .active";class Nn extends gt{static get NAME(){return"tab"}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(On))return;let e;const t=Re(this._element),i=this._element.closest(".nav, .list-group");if(i){const t="UL"===i.nodeName||"OL"===i.nodeName?xn:Ln;e=At.find(t,i),e=e[e.length-1]}const n=e?ft.trigger(e,"hide.bs.tab",{relatedTarget:this._element}):null;if(ft.trigger(this._element,"show.bs.tab",{relatedTarget:e}).defaultPrevented||null!==n&&n.defaultPrevented)return;this._activate(this._element,i);const s=()=>{ft.trigger(e,"hidden.bs.tab",{relatedTarget:this._element}),ft.trigger(this._element,"shown.bs.tab",{relatedTarget:e})};t?this._activate(t,t.parentNode,s):s()}_activate(e,t,i){const n=(!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?At.children(t,Ln):At.find(xn,t))[0],s=i&&n&&n.classList.contains(Cn),o=()=>this._transitionComplete(e,n,i);n&&s?(n.classList.remove(Pn),this._queueCallback(o,e,!0)):o()}_transitionComplete(e,t,i){if(t){t.classList.remove(On);const e=At.findOne(":scope > .dropdown-menu .active",t.parentNode);e&&e.classList.remove(On),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}e.classList.add(On),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),Ue(e),e.classList.contains(Cn)&&e.classList.add(Pn);let n=e.parentNode;if(n&&"LI"===n.nodeName&&(n=n.parentNode),n&&n.classList.contains("dropdown-menu")){const t=e.closest(".dropdown");t&&At.find(".dropdown-toggle",t).forEach((e=>e.classList.add(On))),e.setAttribute("aria-expanded",!0)}i&&i()}static jQueryInterface(e){return this.each((function(){const t=Nn.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}ft.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),He(this)||Nn.getOrCreateInstance(this).show()})),Ge(Nn);const Sn="toast",kn="hide",Fn="show",Rn="showing",Dn={animation:"boolean",autohide:"boolean",delay:"number"},Mn={animation:!0,autohide:!0,delay:5e3};class jn extends gt{constructor(e,t){super(e),this._config=this._getConfig(t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return Dn}static get Default(){return Mn}static get NAME(){return Sn}show(){ft.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(kn),Ue(this._element),this._element.classList.add(Fn),this._element.classList.add(Rn),this._queueCallback((()=>{this._element.classList.remove(Rn),ft.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this._element.classList.contains(Fn)&&(ft.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.add(Rn),this._queueCallback((()=>{this._element.classList.add(kn),this._element.classList.remove(Rn),this._element.classList.remove(Fn),ft.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this._element.classList.contains(Fn)&&this._element.classList.remove(Fn),super.dispose()}_getConfig(e){return e={...Mn,...Tt.getDataAttributes(this._element),..."object"==typeof e&&e?e:{}},Be(Sn,e,this.constructor.DefaultType),e}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const i=e.relatedTarget;this._element===i||this._element.contains(i)||this._maybeScheduleHide()}_setListeners(){ft.on(this._element,"mouseover.bs.toast",(e=>this._onInteraction(e,!0))),ft.on(this._element,"mouseout.bs.toast",(e=>this._onInteraction(e,!1))),ft.on(this._element,"focusin.bs.toast",(e=>this._onInteraction(e,!0))),ft.on(this._element,"focusout.bs.toast",(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=jn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}_t(jn),Ge(jn)},288:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getValidatorsByType=t.showPreset=t.getPresetFieldsByRuleType=t.getPresetField=t.REQUIRED_FIELDS_BY_RULE_TYPE=t.AVAILABLE_PRESET_FIELDS=t.PresetFieldRequirementRelationship=t.PresetFieldType=t.DDPRuleType=t.SliderType=void 0;const n=i(169),s=i(987),o=i(464);var r,a,l,c;function d(e){return t.AVAILABLE_PRESET_FIELDS.find((t=>t.name===e))}!function(e){e[e.LINEAR=0]="LINEAR",e[e.LOGARITHMIC=1]="LOGARITHMIC"}(r=t.SliderType||(t.SliderType={})),function(e){e.AMPLIFICATION="amplification",e.SYN_DROP="syn_drop",e.FILTER="filter",e.TCP_AUTHENTICATOR="tcp_authenticator"}(a=t.DDPRuleType||(t.DDPRuleType={})),function(e){e.TEXT="text",e.NUMBER="number",e.RANGE="range",e.BOOL="bool",e.ENUM="enum"}(l=t.PresetFieldType||(t.PresetFieldType={})),function(e){e[e.IsSet=0]="IsSet",e[e.IsNotSet=1]="IsNotSet",e[e.IsGreater=2]="IsGreater",e[e.IsLower=3]="IsLower",e[e.IsGreaterOrEqual=4]="IsGreaterOrEqual",e[e.IsLowerOrEqual=5]="IsLowerOrEqual",e[e.IsEqual=6]="IsEqual",e[e.IsNotEqual=7]="IsNotEqual"}(c=t.PresetFieldRequirementRelationship||(t.PresetFieldRequirementRelationship={})),t.AVAILABLE_PRESET_FIELDS=[{name:"threshold_bps",printName:"Threshold [bits/s]",type:l.RANGE,defaultValue:0,description:"Activate rule when traffic reaches the given threshold defined by bits per second. Bits per second are calculated on L2 without Ethernet FCS field (4B).",options:{low:1e8,high:1e11,unit:"b/s",type:r.LOGARITHMIC},rule_types:[a.AMPLIFICATION,a.FILTER,a.SYN_DROP,a.TCP_AUTHENTICATOR],requires_fields:[{name:"limit_bps",relationship:c.IsLowerOrEqual,rule_types:[a.AMPLIFICATION]}]},{name:"threshold_pps",printName:"Threshold [packets/s]",type:l.RANGE,defaultValue:0,description:"Activate rule when traffic reaches the given threshold defined by packets per second.",options:{low:1e4,high:1e9,unit:" packet/s",type:r.LOGARITHMIC},rule_types:[a.AMPLIFICATION,a.FILTER,a.SYN_DROP,a.TCP_AUTHENTICATOR],requires_fields:[{name:"limit_pps",relationship:c.IsLowerOrEqual,rule_types:[a.AMPLIFICATION]}]},{name:"protocol",printName:"Protocol",type:l.ENUM,defaultValue:"",description:"List of L4 protocols. If not set, apply to all.",rule_types:[a.FILTER,a.AMPLIFICATION],options:{values:["TCP","UDP","ICMP","SCTP"],multi:!0}},{name:"tcp_flags",printName:"TCP Flags",type:l.TEXT,defaultValue:"",description:"List of TCP flags combinations. Combinations can be created using following values:<ul><li>C: Congestion window reduced,</li><li>E: ECN-Echo,</li><li>U: Urgent,</li><li>A: Acknowledge,</li><li>P: Push,</li><li>R: Reset,</li><li>S: Synchronize,</li><li>F: Finalize.</li></ul>Using these a packet is accepted only if the corresponding flag is set. If a letter is negated using ‘!’ a packet is accepted only if the corresponding flag is not set. Otherwise a value of a flag does not matter.<br>Example for SYN and SYN+ACK packets only: !C!E!U!P!RS!F",rule_types:[a.AMPLIFICATION],validators:[new o.RegexPatternValidator(/^(?!.*?([CEUAPRSF]).*\1)(!?[CEUAPRSF]){1,8}$/gm,"TCP Flags","value can only contain letters C, E, U, A, P, R, S and F, optionally prefixed by exclamation mark (!C), each letter only once. Check the description for an example.")]},{name:"vlan",printName:"VLAN ID",type:l.NUMBER,defaultValue:0,description:"VLAN ID. If zero, match only packets without VLAN ID.",rule_types:[a.AMPLIFICATION,a.FILTER,a.SYN_DROP,a.TCP_AUTHENTICATOR]},{name:"threshold_syn_soft",printName:"Soft SYN threshold",type:l.RANGE,defaultValue:5,description:"Number of SYN-only packets (per client) that are allowed without receiving any ACK-only packet.",options:{low:2,high:10,unit:"packets",type:r.LINEAR},rule_types:[a.SYN_DROP]},{name:"threshold_syn_hard",printName:"Hard SYN threshold",type:l.RANGE,defaultValue:20,description:"Number of packets (per client) after which all consequent SYN-only packets are dropped regardless of received ACK packets.",options:{low:2,high:100,unit:"packets",type:r.LINEAR},rule_types:[a.SYN_DROP,a.TCP_AUTHENTICATOR]},{name:"limit_bps",printName:"Limit [bits/s]",defaultValue:0,description:"Traffic volume defined as bits per second. Defines how much traffic will be allowed to the protected network during an attack. Traffic from N biggest contributors is blocked until traffic volume is limited to or below this target value. Bits per second are calculated on L2 without Ethernet FCS field (4B). A limit value has to be lower or equal to corresponding threshold value.",rule_types:[a.AMPLIFICATION],type:l.RANGE,options:{low:1e8,high:1e11,unit:"b/s",type:r.LOGARITHMIC},validators:[new o.NonZeroValidator],requires_fields:[{name:"threshold_bps",relationship:c.IsGreaterOrEqual,rule_types:[a.AMPLIFICATION]}]},{name:"limit_pps",printName:"Limit [packets/s]",defaultValue:1e6,description:"Traffic volume amount defined as packets per second. Says how much traffic will be limited during an attack. N biggest contributors are blocked until traffic volume is limited to this value.",rule_types:[a.AMPLIFICATION],type:l.RANGE,options:{low:1e4,high:1e9,unit:" packet/s",type:r.LOGARITHMIC},validators:[new o.NonZeroValidator],requires_fields:[{name:"threshold_pps",relationship:c.IsGreaterOrEqual,rule_types:[a.AMPLIFICATION]}]},{name:"fragmentation",printName:"Fragmentation",type:l.ENUM,defaultValue:"ANY",description:"Specification of packets from the fragmentation point of view.",rule_types:[a.AMPLIFICATION],options:{values:["ANY","NO","YES","FIRST","LAST","MIDDLE","NOFIRST"],multi:!1}},{name:"packet_lengths",printName:"Packet lengths [B]",defaultValue:"",description:"List of packet lengths and packet lengths ranges. Only packets of matching length are considered. If empty, packets of any length are considered. L2 packet length without FCS field (4B) is considered. Possible values: x;&gt;x;x-y;&lt;x;&lt;=x;&gt;=x",type:l.TEXT,rule_types:[a.AMPLIFICATION]},{name:"validity_timeout",printName:"Validity timeout",rule_types:[a.TCP_AUTHENTICATOR],type:l.RANGE,defaultValue:1,description:"Maximum validity interval of host (i.e. source IP address) authentication. If a host tries to establish another TCP connection after the timeout has elapsed, it must be authenticated again.",options:{low:1,high:600,unit:"s",type:r.LINEAR}},{name:"algorithm_type",printName:"Algorithm type",type:l.ENUM,defaultValue:"RST_COOKIES",description:"Type of algorithm to be used for mitigation:<ul><li>RST_COOKIES: Reset Cookies algorithm,</li><li>SYN_AUTH: SYN Authentication algorith</li></ul>",rule_types:[a.TCP_AUTHENTICATOR],options:{values:["RST_COOKIES","SYN_AUTH"],multi:!1}},{name:"table_exponent",printName:"Table exponent",type:l.NUMBER,defaultValue:18,description:"Size exponent (i.e. 2^x) of the record table. It corresponds to maximum number of unique source IP addresses.",rule_types:[a.SYN_DROP,a.AMPLIFICATION,a.TCP_AUTHENTICATOR],validators:[new o.NumberRangeValidator(10,30)]}],t.REQUIRED_FIELDS_BY_RULE_TYPE={[a.AMPLIFICATION]:[],[a.SYN_DROP]:["threshold_syn_soft","threshold_syn_hard"],[a.FILTER]:[],[a.TCP_AUTHENTICATOR]:["validity_timeout","algorithm_type"]},t.getPresetField=d,t.getPresetFieldsByRuleType=function(e){return t.AVAILABLE_PRESET_FIELDS.filter((t=>{var i;return null===(i=t.rule_types)||void 0===i?void 0:i.includes(e)}))},t.showPreset=function(e,t,i){const o=document.getElementById("presetDetailTitle"),r=document.getElementById("presetDetailBody"),a=document.getElementById("presetDetailModal");if(o&&r&&a){o.innerHTML=e,r.innerHTML="";for(let e in t){let n=r.insertRow(r.rows.length),o=n.insertCell(),a=n.insertCell(),l=n.insertCell();o.innerHTML=e,"number"==typeof t[e]?a.innerHTML=(0,s.formatSIUnitNumber)(t[e],2,""):a.innerHTML=t[e].toString(),l.innerHTML=i.includes(e)?"Yes":"No"}new n.Modal(a,{backdrop:!0,keyboard:!0}).show()}},t.getValidatorsByType=function(e){const t=d(e);return t?t.validators:void 0}},151:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.savePreset=t.onPresetNameChange=t.onRuleTypeChange=t.removeField=t.updatePresetFormField=t.presetFormAddField=t.initEditPresetsForm=t.addBeforeUnloadEventListener=void 0;const n=i(288),s=i(80),o=i(762),r=i(956),a=i(540);let l={maxId:0,selectedRuleType:n.DDPRuleType.FILTER,activeFields:[]},c=!1;function d(e,t,i,o){l.selectedRuleType=t;let r=Object.assign({},(0,n.getPresetField)(i));if(r){c=!0;let t=(d=(0,a.createPresetFormField)(r,l.maxId,o),f=i,`<div id="fieldContainer${h=l.maxId}">\n<hr class="d-md-none my-2">\n<div class="row my-3 fade-in-fwd">\n    <div class="col-sm-12 col-md-4 my-1">\n    <select class="form-select" id="fieldSelect${h}" onChange="ExaFS.updatePresetFormField(this, ${h})">\n        ${u(l.selectedRuleType,f)}\n</select>\n<p class="form-text text-danger" id="form-error-msg${h}"></p>\n</div>\n<div class="col-sm-12 col-md-4 my-1" id="fieldValueContainer${h}">\n    ${d}\n</div>\n<div class="col-sm-12 col-md-4 my-1">\n<div class="form-check form-switch form-check-inline">\n  <input class="form-check-input" type="checkbox" id="userEditable${h}">\n  <label class="form-check-label" for="userEditable${h}">User can edit</label>\n</div>\n<button class="btn btn-outline-danger mx-2" role="button" onclick="ExaFS.removeField(${h})" title="Remove line"><i class="bi bi-x-lg"></i></button>\n</div>\n</div>\n</div>`);return r.formId=l.maxId,l.activeFields.push(r),l.maxId++,(0,s.createChild)(t,e),g(r.formId,i),r.formId}var d,h,f;return-1}function u(e,t,i){let s="";i||(i=(0,n.getPresetFieldsByRuleType)(e));for(const e of i)s+=`<option value="${e.name}" ${e.name===t?"selected":""}>${e.printName}</option>`;return s}function h(e,t){return!!e.find((e=>e.name===t.value))}function f(e,t){return l.activeFields.filter((i=>i.name===t&&i.formId!==e))}function p(e){const t=document.getElementById("fieldSelect"+e);null==t||t.classList.add("is-invalid"),_(e,"Duplicate rule field")}function m(e,t){const i=f(e,t);if(1===i.length&&void 0!==i[0].formId){const e=document.getElementById("fieldSelect"+i[0].formId);null==e||e.classList.remove("is-invalid"),_(i[0].formId,"")}}function g(e,t){const i=f(e,t);if(i.length>0){for(const e of i)void 0!==e.formId&&p(e.formId);p(e)}}function _(e,t){const i=document.getElementById("form-error-msg"+e),n=document.getElementById("fieldSelect"+e);i&&n&&(i.innerText=t,""==t?n.classList.remove("is-invalid"):n.classList.add("is-invalid"))}function v(e,t){console.log("Checking field requirements");for(const i of e)if(i.requires_fields&&void 0!==i.formId){const n=b(i,e,t);if(console.log(n),0!==n.length){let e="";for(let t of n)e+=", "+t;e=e.slice(2),_(i.formId,"Requirements not satisfied: "+e)}else _(i.formId,"")}}function b(e,t,i){let s=[];const o=document.getElementById("presetInput"+(null==e?void 0:e.formId));if(e.requires_fields)for(const r of e.requires_fields)if(r.rule_types.includes(i)){const e=t.findIndex((e=>e.name==r.name));if(-1==e&&r.relationship!=n.PresetFieldRequirementRelationship.IsNotSet)s.push(r.name+" has to be set");else{const i=document.getElementById("presetInput"+t[e].formId);if(i&&o){const e=i.value;switch(r.relationship){case n.PresetFieldRequirementRelationship.IsNotSet:s.push(r.name+" can not be set with this field");break;case n.PresetFieldRequirementRelationship.IsGreater:e<=o.value&&s.push(r.name+" has to be greater than this field");break;case n.PresetFieldRequirementRelationship.IsLower:e>=o.value&&s.push(r.name+" has to be lower than this field");break;case n.PresetFieldRequirementRelationship.IsGreaterOrEqual:e<o.value&&s.push(r.name+" has to be greater or equal to this field");break;case n.PresetFieldRequirementRelationship.IsLowerOrEqual:e>o.value&&s.push(r.name+" has to be lower or equal to this field");break;case n.PresetFieldRequirementRelationship.IsEqual:e!=o.value&&s.push(r.name+" has to be equal to this field");break;case n.PresetFieldRequirementRelationship.IsNotEqual:e==o.value&&s.push(r.name+" has to be different from this field")}}}}return s}t.addBeforeUnloadEventListener=function(){window.addEventListener("beforeunload",(function(e){let t="There are unsaved changes in the rule template, are you sure you want to exit before saving?";if(c)return(e||window.event).returnValue=t,t}))},t.initEditPresetsForm=function(e,t,i){const n=document.getElementById(i);n&&(n.value=e.fields.rule_type),l.selectedRuleType=e.fields.rule_type,Object.entries(e.fields).forEach((([i,n],s)=>{if("rule_type"!==i){const s=d(t,e.fields.rule_type,i,n);-1!==s&&(document.getElementById(`userEditable${s}`).checked=e.editable.includes(i))}})),v(l.activeFields,l.selectedRuleType)},t.presetFormAddField=d,t.updatePresetFormField=function(e,t){const i=function(e){return l.activeFields.findIndex((t=>t.formId===e))}(t),s=l.activeFields[i].name,o=Object.assign({},(0,n.getPresetField)(e.value)),r=document.getElementById(`fieldValueContainer${t}`);!function(e,t){let i=e.children;for(let t=0;t<i.length;t++)i[t].hasAttribute("invalid")&&e.removeChild(i[t]);_(t,""),e.classList.remove("is-invalid")}(e,t),m(t,s),o?(c=!0,o.formId=t,r&&(r.innerHTML=(0,a.createPresetFormField)(o,t)),-1!==i&&(l.activeFields[i]=o),g(t,e.value)):r&&(r.innerHTML='<p class="text-danger">Invalid rule field name!</p>')},t.removeField=function(e){var t;const i=document.getElementById(`fieldContainer${e}`);if(i){c=!0,null===(t=i.parentElement)||void 0===t||t.removeChild(i);const n=l.activeFields.findIndex((t=>t.formId===e));-1!==n&&(m(e,l.activeFields[n].name),l.activeFields.splice(n,1))}},t.onRuleTypeChange=function(e){const t=(0,n.getPresetFieldsByRuleType)(e);for(let i=0;i<l.maxId;i++){const n=document.getElementById("fieldSelect"+i);if(n){n.classList.remove("is-invalid");let s="";h(t,n)?_(i,""):(s=`<option value=${n.value} selected invalid>${n.options[n.selectedIndex].text}</option>`,n.classList.add("is-invalid"),_(i,"Invalid field for selected rule type")),n.innerHTML=u(e,n.value,t)+s}}},t.onPresetNameChange=function(e,t){const i=document.getElementById(t);c=!0,""!==e.value?(i&&(i.innerText=""),e.classList.remove("is-invalid")):(i&&(i.innerText="Preset name is required"),e.classList.add("is-invalid"))},t.savePreset=function(e,t,i,s,d,u){if(v(l.activeFields,l.selectedRuleType),document.querySelectorAll(".is-invalid").length>0)return void alert("Preset has errors! Fix them before saving.");c=!1;let h=new FormData,f="";const p=function(e){const t=document.getElementById(e);if(!t)return alert("Wrong preset name input ID supplied to savePreset()!"),null;if(!t.value){window.scrollTo({top:0,behavior:"smooth"}),t.classList.add("is-invalid"),t.focus();const e=document.getElementById("presetNameError");return e&&(e.innerText="Preset name is required."),null}return t.value}(e),m=document.getElementById(d);if(!p)return;h.append("name",p),h.append("rule_type",t.toString()),h.append("csrf_token",i);for(let e of l.activeFields){const t=document.getElementById(`presetInput${e.formId}`),i=document.getElementById(`fieldSelect${e.formId}`),s=document.getElementById(`userEditable${e.formId}`);if(t&&i&&s)if(s.checked&&(f+=i.value+";"),t.hasChildNodes()&&"select"!==t.tagName.toLowerCase())h.append(i.value,(0,a.checkboxesToStr)(t));else{let s=t;if(e.type===n.PresetFieldType.RANGE&&e.options){const t=e.options;let r=s.valueAsNumber;t.type===n.SliderType.LOGARITHMIC&&(r=(0,o.logarithmicValueFromPos)(s.valueAsNumber,t.low,t.high)),h.append(i.value,r.toString())}else h.append(i.value,s.value.toString())}}h.append("editable",f);let g="";m&&(g=m.innerHTML,m.setAttribute("disabled",""),m.innerHTML='<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>\n  Saving...'),(0,r.sendFormDataToBackend)(h,s,"POST").then((e=>{200==e.status||201==e.status?(m&&(m.innerHTML="Saved",m.removeAttribute("disabled")),window.location.href=u):e.text().then((t=>{alert("Server returned error status "+e.status+". Check the console for more details"),console.error(t),m&&(m.innerHTML="Errored",m.removeAttribute("disabled"))}))})).catch((e=>{console.log(e),m&&(m.innerHTML=g,m.removeAttribute("disabled")),alert("Could not save preset: "+e)}))}},540:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getErrorMessage=t.setErrorMessage=t.updateRangeValText=t.createPresetFormField=t.checkboxesToStr=t.creteEnumPresetFormField=t.createRangePresetFormField=t.creteBoolPresetFormField=void 0;const n=i(288),s=i(762),o=i(987),r=i(464);function a(e,t,i=!1){return`<div class="form-check form-switch">\n<input class="form-check-input" type="checkbox" value="${e}" id="presetInput${t}" ${d(i)}></div>`}function l(e,t,i,r=!1){const a=e.options;void 0===i?i=50:a.type===n.SliderType.LOGARITHMIC&&(i=(0,s.posFromLogarithmicValue)(i,a.low,a.high));let l="",c="";switch(a.type){case n.SliderType.LINEAR:l=(0,o.formatSIUnitNumber)(i,2,a.unit),c=`min=${a.low} max=${a.high}`;break;case n.SliderType.LOGARITHMIC:l=(0,o.formatSIUnitNumber)((0,s.logarithmicValueFromPos)(i,a.low,a.high),2,a.unit),c="min=0 max=100"}return`\n<div class="row form-text">\n<div class="col-4">Restrictive</div>\n<div class="col-4 text-center" id="rangeVal${t}">${l}</div>\n<div class="col-4 text-end">Permissive</div>\n</div>\n<input class="form-range" type="range" value="${i}" id="presetInput${t}" ${c} step=1 ${d(r)}\nonChange="ExaFS.updateRangeValText(this, ${t}, ${a.low}, ${a.high}, ${a.type}, '${a.unit}')" name="ddp_${e.name}"\nonInput="ExaFS.updateRangeValText(this, ${t}, ${a.low}, ${a.high}, ${a.type}, '${a.unit}')">`}function c(e,t,i,n=!1){let s=e.options,o="";if(s.multi){const r=null==i?void 0:i.split(",");for(const i of s.values)o+=`<div class="form-check form-check-inline">\n                      <input class="form-check-input" \n                          type="checkbox" \n                          name="ddp_${e.name}"\n                          id="${i}Check${t}" \n                          value="${i}"\n                          ${d(n)}\n                          ${(null==r?void 0:r.includes(i))?'checked="checked"':""}>\n                      <label class="form-check-label" for="${i}Check${t}">${i}</label>\n                    </div>`;return`<div class="form-check form-check-inline" id="presetInput${t}">${o}</div>`}for(const e of s.values)o+=`<option value=${e} ${e===i?"selected":""}>${e}</option>`;return`<select class="form-select" id="presetInput${t}" ${d(n)} name="ddp_${e.name}">${o}</select>`}function d(e){return e?"disabled":""}t.creteBoolPresetFormField=a,t.createRangePresetFormField=l,t.creteEnumPresetFormField=c,t.checkboxesToStr=function(e){let t="";for(let i of e.children)for(let e of i.children)if("input"===e.tagName.toLowerCase()&&"checkbox"===e.getAttribute("type")){const i=e;i.checked&&(t+=i.value+",")}return t},t.createPresetFormField=function(e,t,i,s=!1){let o='<div class="fade-in-fwd">';void 0===i&&(i=e.defaultValue);const r=e.validators?`onInput="ExaFS.validateField('${e.name}', this, ${t})"`:"";switch(e.type){case n.PresetFieldType.TEXT:o+=`<input class="form-control" ${r} name="ddp_${e.name}" type="text" value="${i}" id="presetInput${t}" ${d(s)}>`;break;case n.PresetFieldType.NUMBER:o+=`<input class="form-control" ${r} type="number" name="ddp_${e.name}" value="${i}" id="presetInput${t}" ${d(s)}>`;break;case n.PresetFieldType.RANGE:o+=l(e,t,i,s);break;case n.PresetFieldType.BOOL:o+=a(i,t,s);break;case n.PresetFieldType.ENUM:o+=c(e,t,i,s)}return o+=`<p class="form-text text-danger" id="form-value-error-msg${t}"></p>`,e.description&&(o+=`<div class="form-text">${e.description}</div>`),o+="</div>",o},t.updateRangeValText=function(e,t,i,a,l,c=""){const d=document.getElementById("rangeVal"+t);d&&(l===n.SliderType.LINEAR?d.innerText=(0,o.formatSIUnitNumber)(e.valueAsNumber,2,c):l===n.SliderType.LOGARITHMIC&&(d.innerText=(0,o.formatSIUnitNumber)((0,s.logarithmicValueFromPos)(e.valueAsNumber,i,a),2,c)),(0,r.validateField)(e.name.slice(4),e,t))},t.setErrorMessage=function(e,t){const i=document.getElementById("form-value-error-msg"+e);i&&(i.innerHTML=t)},t.getErrorMessage=function(e){const t=document.getElementById("form-value-error-msg"+e);return t?t.innerHTML:""}},762:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.posFromLogarithmicValue=t.logarithmicValueFromPos=void 0,t.logarithmicValueFromPos=function(e,t,i){if(e<=0)return 0;const n=Math.log(Math.max(t,1)),s=(Math.log(i)-n)/100;return Math.round(Math.exp(e*s+n))},t.posFromLogarithmicValue=function(e,t,i){if(e<=0)return 0;const n=Math.log(Math.max(t,1)),s=(Math.log(i)-n)/100;return Math.round((Math.log(e)-n)/s)}},293:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.beforeIPFormSend=t.changeAdvancedOptionsText=t.initSelectPresetForm=void 0;const n=i(288),s=i(540),o=i(80),r=i(762);let a;function l(e,t,i){return`<div class="row"><div class="my-3 col-md-6 col-sm-12 px-3">\n<label for="presetInput${t}" class="form-label">${i}</label>\n${e}\n<p class="form-text text-danger" id="form-error-msg${t}"></p>\n</div></div>`}t.initSelectPresetForm=function(e,t,i,r){const c={defaultValue:e.fields.rule_type,name:"rule_type",printName:"Rule type",type:n.PresetFieldType.TEXT,rule_types:[n.DDPRuleType.AMPLIFICATION,n.DDPRuleType.FILTER,n.DDPRuleType.SYN_DROP,n.DDPRuleType.TCP_AUTHENTICATOR]};a=e;let d=l((0,s.createPresetFormField)(c,0,e.fields.rule_type,!0),0,c.printName),u=1;Object.entries(e.fields).forEach((([t,i],o)=>{if("rule_type"!==t){let o=Object.assign({},(0,n.getPresetField)(t));r&&"ddp_"+t in r&&(i=r["ddp_"+t]);const a=(0,s.createPresetFormField)(o,u,i,!function(e,t){return t.includes(e)}(t,e.editable));d+="\n"+l(a,u,o.printName),u++}})),d+='<hr class="my-2>',(0,o.clearAllChildren)(t),(0,o.createChild)(d,t);const h=document.getElementById(i);null==h||h.classList.remove("d-none")},t.changeAdvancedOptionsText=function(e,t){const i=document.getElementById(e);i&&(i.innerHTML=t?'Hide advanced options <i class="bi bi-caret-up-fill"></i>':'Show advanced options <i class="bi bi-caret-down-fill"></i>')},t.beforeIPFormSend=function(e,t,i){const s=new FormData(e);if("4"!==s.get("action"))return!0;const a=n.AVAILABLE_PRESET_FIELDS.filter((e=>e.type===n.PresetFieldType.RANGE));for(const t of a){const i=s.get("ddp_"+t.name);if(null!==i){const s=t.options,a=document.querySelector(`[name="${"ddp_"+t.name}"]`);if(a&&(0,o.removeElement)(a),s.type===n.SliderType.LOGARITHMIC){const n=`<input type="hidden" value="${(0,r.logarithmicValueFromPos)(+i,s.low,s.high)}" name="${"ddp_"+t.name}">`;(0,o.attachHtmlToRef)((0,o.stringToHtml)(n),e)}else{const n=`<input type="hidden" value="${i}" name="${"ddp_"+t.name}">`;(0,o.attachHtmlToRef)((0,o.stringToHtml)(n),e)}}}return!0}},464:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.validateField=t.NonZeroValidator=t.RegexPatternValidator=t.NumberRangeValidator=void 0;const n=i(540),s=i(288);t.NumberRangeValidator=class{constructor(e,t){this.options={min:e,max:t}}validate(e){let t=!0;return void 0!==this.options.min&&e<this.options.min&&(t=!1),void 0!==this.options.max&&e>this.options.max&&(t=!1),t}invalidMessage(){return`Value has to be in range ${this.options.min} - ${this.options.max}`}},t.RegexPatternValidator=class{constructor(e,t,i){this.options={regex:e,name:t,hint:i}}validate(e){return new RegExp(this.options.regex).test(e)}invalidMessage(){let e="Invalid format";return this.options.name&&(e+=" for "+this.options.name),this.options.hint&&(e+=" - "+this.options.hint),e}},t.NonZeroValidator=class{validate(e){return 0!=+e}invalidMessage(){return"This field can not be zero."}},t.validateField=function(e,t,i){const o=(0,s.getValidatorsByType)(e);if(o){let e="",s=!0;for(let i of o)i.validate(t.value)||(s=!1,e+=i.invalidMessage()+"<br>");(0,n.setErrorMessage)(i,e),s?t.classList.remove("is-invalid"):t.classList.add("is-invalid")}}},590:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.hideFieldIfNot=t.changeAllCheckboxes=t.switchFocusOnKeypress=t.fillOrganization=void 0;const n=i(169);t.fillOrganization=function(e,t){const i=document.getElementById("orgSelectModal");if(!i)return;const s=new n.Modal(i,{backdrop:!0});s.show();const o=document.getElementById("fill-org-btn");o&&(o.onclick=function(){!function(e,t){const i=document.getElementById("orgSelect");if(!i)return;const n=i.value.split("/");e&&(e.value=n[0]),t&&(t.value=n[1])}(document.getElementById(e),document.getElementById(t)),s.hide()})},t.switchFocusOnKeypress=function(e,t,i){if(e.key==t){e.preventDefault();const t=document.getElementById(i);t&&t.focus()}},t.changeAllCheckboxes=function(e,t="input[type='checkbox']"){const i=document.querySelectorAll(t);for(let t of i)t.checked=e},t.hideFieldIfNot=function(e,t,i){const n=document.getElementById(i);e!=t?null==n||n.classList.add("d-none"):null==n||n.classList.remove("d-none")}},509:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.register_listeners=void 0;const n=i(169);t.register_listeners=function(){[].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map((function(e){return new n.Tooltip(e)}))}},956:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sendJsonToBackend=t.sendFormDataToBackend=void 0,t.sendFormDataToBackend=function(e,t,i){const n={method:i.toUpperCase(),body:e};return fetch(t,n)},t.sendJsonToBackend=function(e,t,i,n){const s=new Headers;s.set("X-CSRFToken",n),s.set("Accept","application/json, text/plain, */*"),s.set("Content-Type","application/json");const o={method:i,headers:s,body:JSON.stringify(e)};return fetch(t,o)}},80:(e,t)=>{function i(e){return(new DOMParser).parseFromString(e,"text/html").body.children}function n(e,t){const i=document.getElementById(t);i&&s(e,i)}function s(e,t){if(e instanceof HTMLElement)t.appendChild(e);else if(e instanceof HTMLCollection){let i=Array.from(e);for(let e=0;e<i.length;e++){const n=i[e];t.appendChild(n)}}}Object.defineProperty(t,"__esModule",{value:!0}),t.removeElement=t.clearAllChildren=t.createChild=t.attachHtmlToRef=t.attachHtmlTo=t.stringToHtml=void 0,t.stringToHtml=i,t.attachHtmlTo=n,t.attachHtmlToRef=s,t.createChild=function(e,t){n(i(e),t)},t.clearAllChildren=function(e){const t=document.getElementById(e);t&&(t.innerHTML="")},t.removeElement=function(e){var t;null===(t=e.parentElement)||void 0===t||t.removeChild(e)}},987:(e,t)=>{function i(e,t){const i=Math.pow(10,t||0);return Math.round(e*i)/i}Object.defineProperty(t,"__esModule",{value:!0}),t.formatSIUnitNumber=void 0,t.formatSIUnitNumber=function(e,t,n=""){return e>=1e12?i(e/1e12,t).toString()+" T"+n:e>=1e9?i(e/1e9,t).toString()+" G"+n:e>=1e6?i(e/1e6,t).toString()+" M"+n:e>=1e3?i(e/1e3,t).toString()+" k"+n:i(e,t).toString()+" "+n}}},t={};function i(n){var s=t[n];if(void 0!==s)return s.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,i),o.exports}i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{var e=n;Object.defineProperty(e,"__esModule",{value:!0}),e.validateField=e.beforeIPFormSend=e.changeAdvancedOptionsText=e.initSelectPresetForm=e.showPreset=e.onPresetNameChange=e.savePreset=e.removeField=e.updatePresetFormField=e.onRuleTypeChange=e.presetFormAddField=e.initEditPresetsForm=e.addBeforeUnloadEventListener=e.updateRangeValText=e.hideFieldIfNot=e.changeAllCheckboxes=e.fillOrganization=e.switchFocusOnKeypress=void 0;const t=i(509);var s=i(590);Object.defineProperty(e,"switchFocusOnKeypress",{enumerable:!0,get:function(){return s.switchFocusOnKeypress}}),Object.defineProperty(e,"fillOrganization",{enumerable:!0,get:function(){return s.fillOrganization}}),Object.defineProperty(e,"changeAllCheckboxes",{enumerable:!0,get:function(){return s.changeAllCheckboxes}}),Object.defineProperty(e,"hideFieldIfNot",{enumerable:!0,get:function(){return s.hideFieldIfNot}});var o=i(540);Object.defineProperty(e,"updateRangeValText",{enumerable:!0,get:function(){return o.updateRangeValText}});var r=i(151);Object.defineProperty(e,"addBeforeUnloadEventListener",{enumerable:!0,get:function(){return r.addBeforeUnloadEventListener}}),Object.defineProperty(e,"initEditPresetsForm",{enumerable:!0,get:function(){return r.initEditPresetsForm}}),Object.defineProperty(e,"presetFormAddField",{enumerable:!0,get:function(){return r.presetFormAddField}}),Object.defineProperty(e,"onRuleTypeChange",{enumerable:!0,get:function(){return r.onRuleTypeChange}}),Object.defineProperty(e,"updatePresetFormField",{enumerable:!0,get:function(){return r.updatePresetFormField}}),Object.defineProperty(e,"removeField",{enumerable:!0,get:function(){return r.removeField}}),Object.defineProperty(e,"savePreset",{enumerable:!0,get:function(){return r.savePreset}}),Object.defineProperty(e,"onPresetNameChange",{enumerable:!0,get:function(){return r.onPresetNameChange}});var a=i(288);Object.defineProperty(e,"showPreset",{enumerable:!0,get:function(){return a.showPreset}});var l=i(293);Object.defineProperty(e,"initSelectPresetForm",{enumerable:!0,get:function(){return l.initSelectPresetForm}}),Object.defineProperty(e,"changeAdvancedOptionsText",{enumerable:!0,get:function(){return l.changeAdvancedOptionsText}}),Object.defineProperty(e,"beforeIPFormSend",{enumerable:!0,get:function(){return l.beforeIPFormSend}});var c=i(464);Object.defineProperty(e,"validateField",{enumerable:!0,get:function(){return c.validateField}}),window.onload=function(){(0,t.register_listeners)()}})(),ExaFS=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,